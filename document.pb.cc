// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: document.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "document.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace index_system {
namespace pb {
class StringFeatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StringFeature> {
} _StringFeature_default_instance_;
class StringFeaturesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StringFeatures> {
} _StringFeatures_default_instance_;
class FeatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Feature> {
} _Feature_default_instance_;
class FeaturesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Features> {
} _Features_default_instance_;
class FieldDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Field> {
} _Field_default_instance_;
class FeedDocDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FeedDoc> {
} _FeedDoc_default_instance_;
class DocumentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Document> {
} _Document_default_instance_;
class DocumentsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Documents> {
} _Documents_default_instance_;

namespace protobuf_document_2eproto {


void TableStruct::Shutdown() {
  _StringFeature_default_instance_.Shutdown();
  _StringFeatures_default_instance_.Shutdown();
  _Feature_default_instance_.Shutdown();
  _Features_default_instance_.Shutdown();
  _Field_default_instance_.Shutdown();
  _FeedDoc_default_instance_.Shutdown();
  _Document_default_instance_.Shutdown();
  _Documents_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _StringFeature_default_instance_.DefaultConstruct();
  _StringFeatures_default_instance_.DefaultConstruct();
  _Feature_default_instance_.DefaultConstruct();
  _Features_default_instance_.DefaultConstruct();
  _Field_default_instance_.DefaultConstruct();
  _FeedDoc_default_instance_.DefaultConstruct();
  _Document_default_instance_.DefaultConstruct();
  _Documents_default_instance_.DefaultConstruct();
  _Document_default_instance_.get_mutable()->attributes_ = const_cast< ::index_system::pb::Feature*>(
      ::index_system::pb::Feature::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_document_2eproto


// ===================================================================

static ::std::string* MutableUnknownFieldsForStringFeature(
    StringFeature* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StringFeature::kNameFieldNumber;
const int StringFeature::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StringFeature::StringFeature()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_document_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:index_system.pb.StringFeature)
}
StringFeature::StringFeature(const StringFeature& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:index_system.pb.StringFeature)
}

void StringFeature::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

StringFeature::~StringFeature() {
  // @@protoc_insertion_point(destructor:index_system.pb.StringFeature)
  SharedDtor();
}

void StringFeature::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StringFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StringFeature& StringFeature::default_instance() {
  protobuf_document_2eproto::InitDefaults();
  return *internal_default_instance();
}

StringFeature* StringFeature::New(::google::protobuf::Arena* arena) const {
  StringFeature* n = new StringFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StringFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:index_system.pb.StringFeature)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StringFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      NewPermanentCallback(
          &MutableUnknownFieldsForStringFeature, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:index_system.pb.StringFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double value = 2;
      case 2: {
        if (tag == 17u) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:index_system.pb.StringFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:index_system.pb.StringFeature)
  return false;
#undef DO_
}

void StringFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:index_system.pb.StringFeature)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional double value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:index_system.pb.StringFeature)
}

size_t StringFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:index_system.pb.StringFeature)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional double value = 2;
    if (has_value()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringFeature::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StringFeature*>(&from));
}

void StringFeature::MergeFrom(const StringFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:index_system.pb.StringFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
}

void StringFeature::CopyFrom(const StringFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:index_system.pb.StringFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringFeature::IsInitialized() const {
  return true;
}

void StringFeature::Swap(StringFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringFeature::InternalSwap(StringFeature* other) {
  name_.Swap(&other->name_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StringFeature::GetTypeName() const {
  return "index_system.pb.StringFeature";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StringFeature

// optional string name = 1;
bool StringFeature::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StringFeature::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void StringFeature::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void StringFeature::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& StringFeature::name() const {
  // @@protoc_insertion_point(field_get:index_system.pb.StringFeature.name)
  return name_.GetNoArena();
}
void StringFeature::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:index_system.pb.StringFeature.name)
}
#if LANG_CXX11
void StringFeature::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:index_system.pb.StringFeature.name)
}
#endif
void StringFeature::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:index_system.pb.StringFeature.name)
}
void StringFeature::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:index_system.pb.StringFeature.name)
}
::std::string* StringFeature::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:index_system.pb.StringFeature.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StringFeature::release_name() {
  // @@protoc_insertion_point(field_release:index_system.pb.StringFeature.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StringFeature::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:index_system.pb.StringFeature.name)
}

// optional double value = 2;
bool StringFeature::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StringFeature::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void StringFeature::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void StringFeature::clear_value() {
  value_ = 0;
  clear_has_value();
}
double StringFeature::value() const {
  // @@protoc_insertion_point(field_get:index_system.pb.StringFeature.value)
  return value_;
}
void StringFeature::set_value(double value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.StringFeature.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForStringFeatures(
    StringFeatures* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StringFeatures::kFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StringFeatures::StringFeatures()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_document_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:index_system.pb.StringFeatures)
}
StringFeatures::StringFeatures(const StringFeatures& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      features_(from.features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:index_system.pb.StringFeatures)
}

void StringFeatures::SharedCtor() {
  _cached_size_ = 0;
}

StringFeatures::~StringFeatures() {
  // @@protoc_insertion_point(destructor:index_system.pb.StringFeatures)
  SharedDtor();
}

void StringFeatures::SharedDtor() {
}

void StringFeatures::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StringFeatures& StringFeatures::default_instance() {
  protobuf_document_2eproto::InitDefaults();
  return *internal_default_instance();
}

StringFeatures* StringFeatures::New(::google::protobuf::Arena* arena) const {
  StringFeatures* n = new StringFeatures;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StringFeatures::Clear() {
// @@protoc_insertion_point(message_clear_start:index_system.pb.StringFeatures)
  features_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StringFeatures::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      NewPermanentCallback(
          &MutableUnknownFieldsForStringFeatures, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:index_system.pb.StringFeatures)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .index_system.pb.StringFeature features = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_features()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:index_system.pb.StringFeatures)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:index_system.pb.StringFeatures)
  return false;
#undef DO_
}

void StringFeatures::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:index_system.pb.StringFeatures)
  // repeated .index_system.pb.StringFeature features = 1;
  for (unsigned int i = 0, n = this->features_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->features(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:index_system.pb.StringFeatures)
}

size_t StringFeatures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:index_system.pb.StringFeatures)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .index_system.pb.StringFeature features = 1;
  {
    unsigned int count = this->features_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->features(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringFeatures::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StringFeatures*>(&from));
}

void StringFeatures::MergeFrom(const StringFeatures& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:index_system.pb.StringFeatures)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  features_.MergeFrom(from.features_);
}

void StringFeatures::CopyFrom(const StringFeatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:index_system.pb.StringFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringFeatures::IsInitialized() const {
  return true;
}

void StringFeatures::Swap(StringFeatures* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringFeatures::InternalSwap(StringFeatures* other) {
  features_.UnsafeArenaSwap(&other->features_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StringFeatures::GetTypeName() const {
  return "index_system.pb.StringFeatures";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StringFeatures

// repeated .index_system.pb.StringFeature features = 1;
int StringFeatures::features_size() const {
  return features_.size();
}
void StringFeatures::clear_features() {
  features_.Clear();
}
const ::index_system::pb::StringFeature& StringFeatures::features(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.StringFeatures.features)
  return features_.Get(index);
}
::index_system::pb::StringFeature* StringFeatures::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.StringFeatures.features)
  return features_.Mutable(index);
}
::index_system::pb::StringFeature* StringFeatures::add_features() {
  // @@protoc_insertion_point(field_add:index_system.pb.StringFeatures.features)
  return features_.Add();
}
::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >*
StringFeatures::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.StringFeatures.features)
  return &features_;
}
const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >&
StringFeatures::features() const {
  // @@protoc_insertion_point(field_list:index_system.pb.StringFeatures.features)
  return features_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForFeature(
    Feature* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Feature::kNameFieldNumber;
const int Feature::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Feature::Feature()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_document_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:index_system.pb.Feature)
}
Feature::Feature(const Feature& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&name_, &from.name_,
    reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&name_) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:index_system.pb.Feature)
}

void Feature::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&name_, 0, reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&name_) + sizeof(value_));
}

Feature::~Feature() {
  // @@protoc_insertion_point(destructor:index_system.pb.Feature)
  SharedDtor();
}

void Feature::SharedDtor() {
}

void Feature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Feature& Feature::default_instance() {
  protobuf_document_2eproto::InitDefaults();
  return *internal_default_instance();
}

Feature* Feature::New(::google::protobuf::Arena* arena) const {
  Feature* n = new Feature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:index_system.pb.Feature)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&name_, 0, reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&name_) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Feature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      NewPermanentCallback(
          &MutableUnknownFieldsForFeature, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:index_system.pb.Feature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 name = 1;
      case 1: {
        if (tag == 8u) {
          set_has_name();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &name_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double value = 2;
      case 2: {
        if (tag == 17u) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:index_system.pb.Feature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:index_system.pb.Feature)
  return false;
#undef DO_
}

void Feature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:index_system.pb.Feature)
  // optional uint64 name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->name(), output);
  }

  // optional double value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:index_system.pb.Feature)
}

size_t Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:index_system.pb.Feature)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->name());
    }

    // optional double value = 2;
    if (has_value()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Feature::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Feature*>(&from));
}

void Feature::MergeFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:index_system.pb.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
}

void Feature::CopyFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:index_system.pb.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {
  return true;
}

void Feature::Swap(Feature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Feature::InternalSwap(Feature* other) {
  std::swap(name_, other->name_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Feature::GetTypeName() const {
  return "index_system.pb.Feature";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Feature

// optional uint64 name = 1;
bool Feature::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Feature::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Feature::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Feature::clear_name() {
  name_ = GOOGLE_ULONGLONG(0);
  clear_has_name();
}
::google::protobuf::uint64 Feature::name() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Feature.name)
  return name_;
}
void Feature::set_name(::google::protobuf::uint64 value) {
  set_has_name();
  name_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Feature.name)
}

// optional double value = 2;
bool Feature::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Feature::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void Feature::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void Feature::clear_value() {
  value_ = 0;
  clear_has_value();
}
double Feature::value() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Feature.value)
  return value_;
}
void Feature::set_value(double value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Feature.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForFeatures(
    Features* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Features::kFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Features::Features()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_document_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:index_system.pb.Features)
}
Features::Features(const Features& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      features_(from.features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:index_system.pb.Features)
}

void Features::SharedCtor() {
  _cached_size_ = 0;
}

Features::~Features() {
  // @@protoc_insertion_point(destructor:index_system.pb.Features)
  SharedDtor();
}

void Features::SharedDtor() {
}

void Features::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Features& Features::default_instance() {
  protobuf_document_2eproto::InitDefaults();
  return *internal_default_instance();
}

Features* Features::New(::google::protobuf::Arena* arena) const {
  Features* n = new Features;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Features::Clear() {
// @@protoc_insertion_point(message_clear_start:index_system.pb.Features)
  features_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Features::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      NewPermanentCallback(
          &MutableUnknownFieldsForFeatures, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:index_system.pb.Features)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .index_system.pb.Feature features = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_features()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:index_system.pb.Features)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:index_system.pb.Features)
  return false;
#undef DO_
}

void Features::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:index_system.pb.Features)
  // repeated .index_system.pb.Feature features = 1;
  for (unsigned int i = 0, n = this->features_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->features(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:index_system.pb.Features)
}

size_t Features::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:index_system.pb.Features)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .index_system.pb.Feature features = 1;
  {
    unsigned int count = this->features_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->features(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Features::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Features*>(&from));
}

void Features::MergeFrom(const Features& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:index_system.pb.Features)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  features_.MergeFrom(from.features_);
}

void Features::CopyFrom(const Features& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:index_system.pb.Features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Features::IsInitialized() const {
  return true;
}

void Features::Swap(Features* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Features::InternalSwap(Features* other) {
  features_.UnsafeArenaSwap(&other->features_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Features::GetTypeName() const {
  return "index_system.pb.Features";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Features

// repeated .index_system.pb.Feature features = 1;
int Features::features_size() const {
  return features_.size();
}
void Features::clear_features() {
  features_.Clear();
}
const ::index_system::pb::Feature& Features::features(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Features.features)
  return features_.Get(index);
}
::index_system::pb::Feature* Features::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.Features.features)
  return features_.Mutable(index);
}
::index_system::pb::Feature* Features::add_features() {
  // @@protoc_insertion_point(field_add:index_system.pb.Features.features)
  return features_.Add();
}
::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >*
Features::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Features.features)
  return &features_;
}
const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >&
Features::features() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Features.features)
  return features_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForField(
    Field* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Field::kNameFieldNumber;
const int Field::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Field::Field()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_document_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:index_system.pb.Field)
}
Field::Field(const Field& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:index_system.pb.Field)
}

void Field::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Field::~Field() {
  // @@protoc_insertion_point(destructor:index_system.pb.Field)
  SharedDtor();
}

void Field::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Field& Field::default_instance() {
  protobuf_document_2eproto::InitDefaults();
  return *internal_default_instance();
}

Field* Field::New(::google::protobuf::Arena* arena) const {
  Field* n = new Field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Field::Clear() {
// @@protoc_insertion_point(message_clear_start:index_system.pb.Field)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      NewPermanentCallback(
          &MutableUnknownFieldsForField, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:index_system.pb.Field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:index_system.pb.Field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:index_system.pb.Field)
  return false;
#undef DO_
}

void Field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:index_system.pb.Field)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:index_system.pb.Field)
}

size_t Field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:index_system.pb.Field)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Field::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Field*>(&from));
}

void Field::MergeFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:index_system.pb.Field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void Field::CopyFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:index_system.pb.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Field::IsInitialized() const {
  return true;
}

void Field::Swap(Field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Field::InternalSwap(Field* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Field::GetTypeName() const {
  return "index_system.pb.Field";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Field

// optional string name = 1;
bool Field::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Field::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Field::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Field::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Field::name() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Field.name)
  return name_.GetNoArena();
}
void Field::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:index_system.pb.Field.name)
}
#if LANG_CXX11
void Field::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:index_system.pb.Field.name)
}
#endif
void Field::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:index_system.pb.Field.name)
}
void Field::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:index_system.pb.Field.name)
}
::std::string* Field::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:index_system.pb.Field.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Field::release_name() {
  // @@protoc_insertion_point(field_release:index_system.pb.Field.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Field::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:index_system.pb.Field.name)
}

// optional string value = 2;
bool Field::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Field::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void Field::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void Field::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& Field::value() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Field.value)
  return value_.GetNoArena();
}
void Field::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:index_system.pb.Field.value)
}
#if LANG_CXX11
void Field::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:index_system.pb.Field.value)
}
#endif
void Field::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:index_system.pb.Field.value)
}
void Field::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:index_system.pb.Field.value)
}
::std::string* Field::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:index_system.pb.Field.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Field::release_value() {
  // @@protoc_insertion_point(field_release:index_system.pb.Field.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Field::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:index_system.pb.Field.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForFeedDoc(
    FeedDoc* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeedDoc::kDocIdFieldNumber;
const int FeedDoc::kFeedTimeFieldNumber;
const int FeedDoc::kIsdelFieldNumber;
const int FeedDoc::kCategoriesFieldNumber;
const int FeedDoc::kKeywordsFieldNumber;
const int FeedDoc::kTopicsFieldNumber;
const int FeedDoc::kVentitiesFieldNumber;
const int FeedDoc::kFieldsFieldNumber;
const int FeedDoc::kTitleEntitiesFieldNumber;
const int FeedDoc::kMultiCategoriesFieldNumber;
const int FeedDoc::kRealTitleEntitiesFieldNumber;
const int FeedDoc::kVeReTeIntersectionFieldNumber;
const int FeedDoc::kVideoTagsFieldNumber;
const int FeedDoc::kMultiTopicsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeedDoc::FeedDoc()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_document_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:index_system.pb.FeedDoc)
}
FeedDoc::FeedDoc(const FeedDoc& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      categories_(from.categories_),
      keywords_(from.keywords_),
      topics_(from.topics_),
      ventities_(from.ventities_),
      fields_(from.fields_),
      title_entities_(from.title_entities_),
      multi_categories_(from.multi_categories_),
      real_title_entities_(from.real_title_entities_),
      ve_re_te_intersection_(from.ve_re_te_intersection_),
      video_tags_(from.video_tags_),
      multi_topics_(from.multi_topics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  doc_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_doc_id()) {
    doc_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_id_);
  }
  ::memcpy(&feed_time_, &from.feed_time_,
    reinterpret_cast<char*>(&isdel_) -
    reinterpret_cast<char*>(&feed_time_) + sizeof(isdel_));
  // @@protoc_insertion_point(copy_constructor:index_system.pb.FeedDoc)
}

void FeedDoc::SharedCtor() {
  _cached_size_ = 0;
  doc_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&feed_time_, 0, reinterpret_cast<char*>(&isdel_) -
    reinterpret_cast<char*>(&feed_time_) + sizeof(isdel_));
}

FeedDoc::~FeedDoc() {
  // @@protoc_insertion_point(destructor:index_system.pb.FeedDoc)
  SharedDtor();
}

void FeedDoc::SharedDtor() {
  doc_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FeedDoc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FeedDoc& FeedDoc::default_instance() {
  protobuf_document_2eproto::InitDefaults();
  return *internal_default_instance();
}

FeedDoc* FeedDoc::New(::google::protobuf::Arena* arena) const {
  FeedDoc* n = new FeedDoc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeedDoc::Clear() {
// @@protoc_insertion_point(message_clear_start:index_system.pb.FeedDoc)
  categories_.Clear();
  keywords_.Clear();
  topics_.Clear();
  ventities_.Clear();
  fields_.Clear();
  title_entities_.Clear();
  multi_categories_.Clear();
  real_title_entities_.Clear();
  ve_re_te_intersection_.Clear();
  video_tags_.Clear();
  multi_topics_.Clear();
  if (has_doc_id()) {
    GOOGLE_DCHECK(!doc_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*doc_id_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&feed_time_, 0, reinterpret_cast<char*>(&isdel_) -
      reinterpret_cast<char*>(&feed_time_) + sizeof(isdel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FeedDoc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      NewPermanentCallback(
          &MutableUnknownFieldsForFeedDoc, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:index_system.pb.FeedDoc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string doc_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doc_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 feed_time = 2;
      case 2: {
        if (tag == 16u) {
          set_has_feed_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &feed_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool isdel = 3 [default = false];
      case 3: {
        if (tag == 24u) {
          set_has_isdel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .index_system.pb.StringFeature categories = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_categories()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .index_system.pb.StringFeature keywords = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_keywords()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .index_system.pb.StringFeature topics = 6;
      case 6: {
        if (tag == 50u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_topics()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .index_system.pb.StringFeature ventities = 7;
      case 7: {
        if (tag == 58u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ventities()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .index_system.pb.Field fields = 8;
      case 8: {
        if (tag == 66u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fields()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .index_system.pb.StringFeature title_entities = 9;
      case 9: {
        if (tag == 74u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_title_entities()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .index_system.pb.StringFeatures multi_categories = 10;
      case 10: {
        if (tag == 82u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_multi_categories()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .index_system.pb.StringFeature real_title_entities = 11;
      case 11: {
        if (tag == 90u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_real_title_entities()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .index_system.pb.StringFeature ve_re_te_intersection = 12;
      case 12: {
        if (tag == 98u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ve_re_te_intersection()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .index_system.pb.StringFeature video_tags = 13;
      case 13: {
        if (tag == 106u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_video_tags()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .index_system.pb.StringFeatures multi_topics = 14;
      case 14: {
        if (tag == 114u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_multi_topics()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:index_system.pb.FeedDoc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:index_system.pb.FeedDoc)
  return false;
#undef DO_
}

void FeedDoc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:index_system.pb.FeedDoc)
  // required string doc_id = 1;
  if (has_doc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->doc_id(), output);
  }

  // required int64 feed_time = 2;
  if (has_feed_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->feed_time(), output);
  }

  // required bool isdel = 3 [default = false];
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdel(), output);
  }

  // repeated .index_system.pb.StringFeature categories = 4;
  for (unsigned int i = 0, n = this->categories_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->categories(i), output);
  }

  // repeated .index_system.pb.StringFeature keywords = 5;
  for (unsigned int i = 0, n = this->keywords_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->keywords(i), output);
  }

  // repeated .index_system.pb.StringFeature topics = 6;
  for (unsigned int i = 0, n = this->topics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->topics(i), output);
  }

  // repeated .index_system.pb.StringFeature ventities = 7;
  for (unsigned int i = 0, n = this->ventities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->ventities(i), output);
  }

  // repeated .index_system.pb.Field fields = 8;
  for (unsigned int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->fields(i), output);
  }

  // repeated .index_system.pb.StringFeature title_entities = 9;
  for (unsigned int i = 0, n = this->title_entities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->title_entities(i), output);
  }

  // repeated .index_system.pb.StringFeatures multi_categories = 10;
  for (unsigned int i = 0, n = this->multi_categories_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->multi_categories(i), output);
  }

  // repeated .index_system.pb.StringFeature real_title_entities = 11;
  for (unsigned int i = 0, n = this->real_title_entities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->real_title_entities(i), output);
  }

  // repeated .index_system.pb.StringFeature ve_re_te_intersection = 12;
  for (unsigned int i = 0, n = this->ve_re_te_intersection_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->ve_re_te_intersection(i), output);
  }

  // repeated .index_system.pb.StringFeature video_tags = 13;
  for (unsigned int i = 0, n = this->video_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->video_tags(i), output);
  }

  // repeated .index_system.pb.StringFeatures multi_topics = 14;
  for (unsigned int i = 0, n = this->multi_topics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->multi_topics(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:index_system.pb.FeedDoc)
}

size_t FeedDoc::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:index_system.pb.FeedDoc)
  size_t total_size = 0;

  if (has_doc_id()) {
    // required string doc_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->doc_id());
  }

  if (has_feed_time()) {
    // required int64 feed_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->feed_time());
  }

  if (has_isdel()) {
    // required bool isdel = 3 [default = false];
    total_size += 1 + 1;
  }

  return total_size;
}
size_t FeedDoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:index_system.pb.FeedDoc)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string doc_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->doc_id());

    // required int64 feed_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->feed_time());

    // required bool isdel = 3 [default = false];
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .index_system.pb.StringFeature categories = 4;
  {
    unsigned int count = this->categories_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->categories(i));
    }
  }

  // repeated .index_system.pb.StringFeature keywords = 5;
  {
    unsigned int count = this->keywords_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keywords(i));
    }
  }

  // repeated .index_system.pb.StringFeature topics = 6;
  {
    unsigned int count = this->topics_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topics(i));
    }
  }

  // repeated .index_system.pb.StringFeature ventities = 7;
  {
    unsigned int count = this->ventities_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ventities(i));
    }
  }

  // repeated .index_system.pb.Field fields = 8;
  {
    unsigned int count = this->fields_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fields(i));
    }
  }

  // repeated .index_system.pb.StringFeature title_entities = 9;
  {
    unsigned int count = this->title_entities_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->title_entities(i));
    }
  }

  // repeated .index_system.pb.StringFeatures multi_categories = 10;
  {
    unsigned int count = this->multi_categories_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->multi_categories(i));
    }
  }

  // repeated .index_system.pb.StringFeature real_title_entities = 11;
  {
    unsigned int count = this->real_title_entities_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->real_title_entities(i));
    }
  }

  // repeated .index_system.pb.StringFeature ve_re_te_intersection = 12;
  {
    unsigned int count = this->ve_re_te_intersection_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ve_re_te_intersection(i));
    }
  }

  // repeated .index_system.pb.StringFeature video_tags = 13;
  {
    unsigned int count = this->video_tags_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video_tags(i));
    }
  }

  // repeated .index_system.pb.StringFeatures multi_topics = 14;
  {
    unsigned int count = this->multi_topics_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->multi_topics(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedDoc::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FeedDoc*>(&from));
}

void FeedDoc::MergeFrom(const FeedDoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:index_system.pb.FeedDoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  categories_.MergeFrom(from.categories_);
  keywords_.MergeFrom(from.keywords_);
  topics_.MergeFrom(from.topics_);
  ventities_.MergeFrom(from.ventities_);
  fields_.MergeFrom(from.fields_);
  title_entities_.MergeFrom(from.title_entities_);
  multi_categories_.MergeFrom(from.multi_categories_);
  real_title_entities_.MergeFrom(from.real_title_entities_);
  ve_re_te_intersection_.MergeFrom(from.ve_re_te_intersection_);
  video_tags_.MergeFrom(from.video_tags_);
  multi_topics_.MergeFrom(from.multi_topics_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_doc_id()) {
      set_has_doc_id();
      doc_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.doc_id_);
    }
    if (from.has_feed_time()) {
      set_feed_time(from.feed_time());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
  }
}

void FeedDoc::CopyFrom(const FeedDoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:index_system.pb.FeedDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedDoc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void FeedDoc::Swap(FeedDoc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeedDoc::InternalSwap(FeedDoc* other) {
  categories_.UnsafeArenaSwap(&other->categories_);
  keywords_.UnsafeArenaSwap(&other->keywords_);
  topics_.UnsafeArenaSwap(&other->topics_);
  ventities_.UnsafeArenaSwap(&other->ventities_);
  fields_.UnsafeArenaSwap(&other->fields_);
  title_entities_.UnsafeArenaSwap(&other->title_entities_);
  multi_categories_.UnsafeArenaSwap(&other->multi_categories_);
  real_title_entities_.UnsafeArenaSwap(&other->real_title_entities_);
  ve_re_te_intersection_.UnsafeArenaSwap(&other->ve_re_te_intersection_);
  video_tags_.UnsafeArenaSwap(&other->video_tags_);
  multi_topics_.UnsafeArenaSwap(&other->multi_topics_);
  doc_id_.Swap(&other->doc_id_);
  std::swap(feed_time_, other->feed_time_);
  std::swap(isdel_, other->isdel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FeedDoc::GetTypeName() const {
  return "index_system.pb.FeedDoc";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeedDoc

// required string doc_id = 1;
bool FeedDoc::has_doc_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FeedDoc::set_has_doc_id() {
  _has_bits_[0] |= 0x00000001u;
}
void FeedDoc::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void FeedDoc::clear_doc_id() {
  doc_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_doc_id();
}
const ::std::string& FeedDoc::doc_id() const {
  // @@protoc_insertion_point(field_get:index_system.pb.FeedDoc.doc_id)
  return doc_id_.GetNoArena();
}
void FeedDoc::set_doc_id(const ::std::string& value) {
  set_has_doc_id();
  doc_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:index_system.pb.FeedDoc.doc_id)
}
#if LANG_CXX11
void FeedDoc::set_doc_id(::std::string&& value) {
  set_has_doc_id();
  doc_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:index_system.pb.FeedDoc.doc_id)
}
#endif
void FeedDoc::set_doc_id(const char* value) {
  set_has_doc_id();
  doc_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:index_system.pb.FeedDoc.doc_id)
}
void FeedDoc::set_doc_id(const char* value, size_t size) {
  set_has_doc_id();
  doc_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:index_system.pb.FeedDoc.doc_id)
}
::std::string* FeedDoc::mutable_doc_id() {
  set_has_doc_id();
  // @@protoc_insertion_point(field_mutable:index_system.pb.FeedDoc.doc_id)
  return doc_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FeedDoc::release_doc_id() {
  // @@protoc_insertion_point(field_release:index_system.pb.FeedDoc.doc_id)
  clear_has_doc_id();
  return doc_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FeedDoc::set_allocated_doc_id(::std::string* doc_id) {
  if (doc_id != NULL) {
    set_has_doc_id();
  } else {
    clear_has_doc_id();
  }
  doc_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_id);
  // @@protoc_insertion_point(field_set_allocated:index_system.pb.FeedDoc.doc_id)
}

// required int64 feed_time = 2;
bool FeedDoc::has_feed_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FeedDoc::set_has_feed_time() {
  _has_bits_[0] |= 0x00000002u;
}
void FeedDoc::clear_has_feed_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void FeedDoc::clear_feed_time() {
  feed_time_ = GOOGLE_LONGLONG(0);
  clear_has_feed_time();
}
::google::protobuf::int64 FeedDoc::feed_time() const {
  // @@protoc_insertion_point(field_get:index_system.pb.FeedDoc.feed_time)
  return feed_time_;
}
void FeedDoc::set_feed_time(::google::protobuf::int64 value) {
  set_has_feed_time();
  feed_time_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.FeedDoc.feed_time)
}

// required bool isdel = 3 [default = false];
bool FeedDoc::has_isdel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FeedDoc::set_has_isdel() {
  _has_bits_[0] |= 0x00000004u;
}
void FeedDoc::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000004u;
}
void FeedDoc::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
bool FeedDoc::isdel() const {
  // @@protoc_insertion_point(field_get:index_system.pb.FeedDoc.isdel)
  return isdel_;
}
void FeedDoc::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.FeedDoc.isdel)
}

// repeated .index_system.pb.StringFeature categories = 4;
int FeedDoc::categories_size() const {
  return categories_.size();
}
void FeedDoc::clear_categories() {
  categories_.Clear();
}
const ::index_system::pb::StringFeature& FeedDoc::categories(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.FeedDoc.categories)
  return categories_.Get(index);
}
::index_system::pb::StringFeature* FeedDoc::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.FeedDoc.categories)
  return categories_.Mutable(index);
}
::index_system::pb::StringFeature* FeedDoc::add_categories() {
  // @@protoc_insertion_point(field_add:index_system.pb.FeedDoc.categories)
  return categories_.Add();
}
::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >*
FeedDoc::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.FeedDoc.categories)
  return &categories_;
}
const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >&
FeedDoc::categories() const {
  // @@protoc_insertion_point(field_list:index_system.pb.FeedDoc.categories)
  return categories_;
}

// repeated .index_system.pb.StringFeature keywords = 5;
int FeedDoc::keywords_size() const {
  return keywords_.size();
}
void FeedDoc::clear_keywords() {
  keywords_.Clear();
}
const ::index_system::pb::StringFeature& FeedDoc::keywords(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.FeedDoc.keywords)
  return keywords_.Get(index);
}
::index_system::pb::StringFeature* FeedDoc::mutable_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.FeedDoc.keywords)
  return keywords_.Mutable(index);
}
::index_system::pb::StringFeature* FeedDoc::add_keywords() {
  // @@protoc_insertion_point(field_add:index_system.pb.FeedDoc.keywords)
  return keywords_.Add();
}
::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >*
FeedDoc::mutable_keywords() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.FeedDoc.keywords)
  return &keywords_;
}
const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >&
FeedDoc::keywords() const {
  // @@protoc_insertion_point(field_list:index_system.pb.FeedDoc.keywords)
  return keywords_;
}

// repeated .index_system.pb.StringFeature topics = 6;
int FeedDoc::topics_size() const {
  return topics_.size();
}
void FeedDoc::clear_topics() {
  topics_.Clear();
}
const ::index_system::pb::StringFeature& FeedDoc::topics(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.FeedDoc.topics)
  return topics_.Get(index);
}
::index_system::pb::StringFeature* FeedDoc::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.FeedDoc.topics)
  return topics_.Mutable(index);
}
::index_system::pb::StringFeature* FeedDoc::add_topics() {
  // @@protoc_insertion_point(field_add:index_system.pb.FeedDoc.topics)
  return topics_.Add();
}
::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >*
FeedDoc::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.FeedDoc.topics)
  return &topics_;
}
const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >&
FeedDoc::topics() const {
  // @@protoc_insertion_point(field_list:index_system.pb.FeedDoc.topics)
  return topics_;
}

// repeated .index_system.pb.StringFeature ventities = 7;
int FeedDoc::ventities_size() const {
  return ventities_.size();
}
void FeedDoc::clear_ventities() {
  ventities_.Clear();
}
const ::index_system::pb::StringFeature& FeedDoc::ventities(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.FeedDoc.ventities)
  return ventities_.Get(index);
}
::index_system::pb::StringFeature* FeedDoc::mutable_ventities(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.FeedDoc.ventities)
  return ventities_.Mutable(index);
}
::index_system::pb::StringFeature* FeedDoc::add_ventities() {
  // @@protoc_insertion_point(field_add:index_system.pb.FeedDoc.ventities)
  return ventities_.Add();
}
::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >*
FeedDoc::mutable_ventities() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.FeedDoc.ventities)
  return &ventities_;
}
const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >&
FeedDoc::ventities() const {
  // @@protoc_insertion_point(field_list:index_system.pb.FeedDoc.ventities)
  return ventities_;
}

// repeated .index_system.pb.Field fields = 8;
int FeedDoc::fields_size() const {
  return fields_.size();
}
void FeedDoc::clear_fields() {
  fields_.Clear();
}
const ::index_system::pb::Field& FeedDoc::fields(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.FeedDoc.fields)
  return fields_.Get(index);
}
::index_system::pb::Field* FeedDoc::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.FeedDoc.fields)
  return fields_.Mutable(index);
}
::index_system::pb::Field* FeedDoc::add_fields() {
  // @@protoc_insertion_point(field_add:index_system.pb.FeedDoc.fields)
  return fields_.Add();
}
::google::protobuf::RepeatedPtrField< ::index_system::pb::Field >*
FeedDoc::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.FeedDoc.fields)
  return &fields_;
}
const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Field >&
FeedDoc::fields() const {
  // @@protoc_insertion_point(field_list:index_system.pb.FeedDoc.fields)
  return fields_;
}

// repeated .index_system.pb.StringFeature title_entities = 9;
int FeedDoc::title_entities_size() const {
  return title_entities_.size();
}
void FeedDoc::clear_title_entities() {
  title_entities_.Clear();
}
const ::index_system::pb::StringFeature& FeedDoc::title_entities(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.FeedDoc.title_entities)
  return title_entities_.Get(index);
}
::index_system::pb::StringFeature* FeedDoc::mutable_title_entities(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.FeedDoc.title_entities)
  return title_entities_.Mutable(index);
}
::index_system::pb::StringFeature* FeedDoc::add_title_entities() {
  // @@protoc_insertion_point(field_add:index_system.pb.FeedDoc.title_entities)
  return title_entities_.Add();
}
::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >*
FeedDoc::mutable_title_entities() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.FeedDoc.title_entities)
  return &title_entities_;
}
const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >&
FeedDoc::title_entities() const {
  // @@protoc_insertion_point(field_list:index_system.pb.FeedDoc.title_entities)
  return title_entities_;
}

// repeated .index_system.pb.StringFeatures multi_categories = 10;
int FeedDoc::multi_categories_size() const {
  return multi_categories_.size();
}
void FeedDoc::clear_multi_categories() {
  multi_categories_.Clear();
}
const ::index_system::pb::StringFeatures& FeedDoc::multi_categories(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.FeedDoc.multi_categories)
  return multi_categories_.Get(index);
}
::index_system::pb::StringFeatures* FeedDoc::mutable_multi_categories(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.FeedDoc.multi_categories)
  return multi_categories_.Mutable(index);
}
::index_system::pb::StringFeatures* FeedDoc::add_multi_categories() {
  // @@protoc_insertion_point(field_add:index_system.pb.FeedDoc.multi_categories)
  return multi_categories_.Add();
}
::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeatures >*
FeedDoc::mutable_multi_categories() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.FeedDoc.multi_categories)
  return &multi_categories_;
}
const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeatures >&
FeedDoc::multi_categories() const {
  // @@protoc_insertion_point(field_list:index_system.pb.FeedDoc.multi_categories)
  return multi_categories_;
}

// repeated .index_system.pb.StringFeature real_title_entities = 11;
int FeedDoc::real_title_entities_size() const {
  return real_title_entities_.size();
}
void FeedDoc::clear_real_title_entities() {
  real_title_entities_.Clear();
}
const ::index_system::pb::StringFeature& FeedDoc::real_title_entities(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.FeedDoc.real_title_entities)
  return real_title_entities_.Get(index);
}
::index_system::pb::StringFeature* FeedDoc::mutable_real_title_entities(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.FeedDoc.real_title_entities)
  return real_title_entities_.Mutable(index);
}
::index_system::pb::StringFeature* FeedDoc::add_real_title_entities() {
  // @@protoc_insertion_point(field_add:index_system.pb.FeedDoc.real_title_entities)
  return real_title_entities_.Add();
}
::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >*
FeedDoc::mutable_real_title_entities() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.FeedDoc.real_title_entities)
  return &real_title_entities_;
}
const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >&
FeedDoc::real_title_entities() const {
  // @@protoc_insertion_point(field_list:index_system.pb.FeedDoc.real_title_entities)
  return real_title_entities_;
}

// repeated .index_system.pb.StringFeature ve_re_te_intersection = 12;
int FeedDoc::ve_re_te_intersection_size() const {
  return ve_re_te_intersection_.size();
}
void FeedDoc::clear_ve_re_te_intersection() {
  ve_re_te_intersection_.Clear();
}
const ::index_system::pb::StringFeature& FeedDoc::ve_re_te_intersection(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.FeedDoc.ve_re_te_intersection)
  return ve_re_te_intersection_.Get(index);
}
::index_system::pb::StringFeature* FeedDoc::mutable_ve_re_te_intersection(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.FeedDoc.ve_re_te_intersection)
  return ve_re_te_intersection_.Mutable(index);
}
::index_system::pb::StringFeature* FeedDoc::add_ve_re_te_intersection() {
  // @@protoc_insertion_point(field_add:index_system.pb.FeedDoc.ve_re_te_intersection)
  return ve_re_te_intersection_.Add();
}
::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >*
FeedDoc::mutable_ve_re_te_intersection() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.FeedDoc.ve_re_te_intersection)
  return &ve_re_te_intersection_;
}
const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >&
FeedDoc::ve_re_te_intersection() const {
  // @@protoc_insertion_point(field_list:index_system.pb.FeedDoc.ve_re_te_intersection)
  return ve_re_te_intersection_;
}

// repeated .index_system.pb.StringFeature video_tags = 13;
int FeedDoc::video_tags_size() const {
  return video_tags_.size();
}
void FeedDoc::clear_video_tags() {
  video_tags_.Clear();
}
const ::index_system::pb::StringFeature& FeedDoc::video_tags(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.FeedDoc.video_tags)
  return video_tags_.Get(index);
}
::index_system::pb::StringFeature* FeedDoc::mutable_video_tags(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.FeedDoc.video_tags)
  return video_tags_.Mutable(index);
}
::index_system::pb::StringFeature* FeedDoc::add_video_tags() {
  // @@protoc_insertion_point(field_add:index_system.pb.FeedDoc.video_tags)
  return video_tags_.Add();
}
::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >*
FeedDoc::mutable_video_tags() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.FeedDoc.video_tags)
  return &video_tags_;
}
const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >&
FeedDoc::video_tags() const {
  // @@protoc_insertion_point(field_list:index_system.pb.FeedDoc.video_tags)
  return video_tags_;
}

// repeated .index_system.pb.StringFeatures multi_topics = 14;
int FeedDoc::multi_topics_size() const {
  return multi_topics_.size();
}
void FeedDoc::clear_multi_topics() {
  multi_topics_.Clear();
}
const ::index_system::pb::StringFeatures& FeedDoc::multi_topics(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.FeedDoc.multi_topics)
  return multi_topics_.Get(index);
}
::index_system::pb::StringFeatures* FeedDoc::mutable_multi_topics(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.FeedDoc.multi_topics)
  return multi_topics_.Mutable(index);
}
::index_system::pb::StringFeatures* FeedDoc::add_multi_topics() {
  // @@protoc_insertion_point(field_add:index_system.pb.FeedDoc.multi_topics)
  return multi_topics_.Add();
}
::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeatures >*
FeedDoc::mutable_multi_topics() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.FeedDoc.multi_topics)
  return &multi_topics_;
}
const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeatures >&
FeedDoc::multi_topics() const {
  // @@protoc_insertion_point(field_list:index_system.pb.FeedDoc.multi_topics)
  return multi_topics_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDocument(
    Document* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Document::kKeywordsFieldNumber;
const int Document::kCategoriesFieldNumber;
const int Document::kAttributesFieldNumber;
const int Document::kFieldsFieldNumber;
const int Document::kIsdelFieldNumber;
const int Document::kIdFieldNumber;
const int Document::kFeedbackGmpFieldNumber;
const int Document::kPublishTimeFieldNumber;
const int Document::kNcidFieldNumber;
const int Document::kUpdateTimeFieldNumber;
const int Document::kProductIdFieldNumber;
const int Document::kUpdateTypeFieldNumber;
const int Document::kExpireAgeHourFieldNumber;
const int Document::kBuildCountFieldNumber;
const int Document::kMultiGmpFieldNumber;
const int Document::kExpireTimeFieldNumber;
const int Document::kFeedVersionFieldNumber;
const int Document::kTopicsFieldNumber;
const int Document::kBuildIncFieldNumber;
const int Document::kGmpUpdateFieldNumber;
const int Document::kVentitiesFieldNumber;
const int Document::kLrFeaHashesFieldNumber;
const int Document::kTitleEntitiesFieldNumber;
const int Document::kQualityFieldNumber;
const int Document::kNewsyScoreFieldNumber;
const int Document::kResponseFieldsFieldNumber;
const int Document::kPublisherHashFieldNumber;
const int Document::kGroupidHashFieldNumber;
const int Document::kCpExpireTypeFieldNumber;
const int Document::kMultiCategoriesFieldNumber;
const int Document::kMediaLevelFieldNumber;
const int Document::kRealTitleEntitiesFieldNumber;
const int Document::kVeReTeIntersectionFieldNumber;
const int Document::kMultiTopicsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Document::Document()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_document_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:index_system.pb.Document)
}
Document::Document(const Document& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      keywords_(from.keywords_),
      categories_(from.categories_),
      fields_(from.fields_),
      product_id_(from.product_id_),
      multi_gmp_(from.multi_gmp_),
      topics_(from.topics_),
      ventities_(from.ventities_),
      lr_fea_hashes_(from.lr_fea_hashes_),
      title_entities_(from.title_entities_),
      response_fields_(from.response_fields_),
      multi_categories_(from.multi_categories_),
      real_title_entities_(from.real_title_entities_),
      ve_re_te_intersection_(from.ve_re_te_intersection_),
      multi_topics_(from.multi_topics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ncid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ncid()) {
    ncid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ncid_);
  }
  if (from.has_attributes()) {
    attributes_ = new ::index_system::pb::Feature(*from.attributes_);
  } else {
    attributes_ = NULL;
  }
  ::memcpy(&feedback_gmp_, &from.feedback_gmp_,
    reinterpret_cast<char*>(&cp_expire_type_) -
    reinterpret_cast<char*>(&feedback_gmp_) + sizeof(cp_expire_type_));
  // @@protoc_insertion_point(copy_constructor:index_system.pb.Document)
}

void Document::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ncid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&attributes_, 0, reinterpret_cast<char*>(&cp_expire_type_) -
    reinterpret_cast<char*>(&attributes_) + sizeof(cp_expire_type_));
}

Document::~Document() {
  // @@protoc_insertion_point(destructor:index_system.pb.Document)
  SharedDtor();
}

void Document::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ncid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete attributes_;
  }
}

void Document::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Document& Document::default_instance() {
  protobuf_document_2eproto::InitDefaults();
  return *internal_default_instance();
}

Document* Document::New(::google::protobuf::Arena* arena) const {
  Document* n = new Document;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Document::Clear() {
// @@protoc_insertion_point(message_clear_start:index_system.pb.Document)
  keywords_.Clear();
  categories_.Clear();
  fields_.Clear();
  product_id_.Clear();
  multi_gmp_.Clear();
  topics_.Clear();
  ventities_.Clear();
  lr_fea_hashes_.Clear();
  title_entities_.Clear();
  response_fields_.Clear();
  multi_categories_.Clear();
  real_title_entities_.Clear();
  ve_re_te_intersection_.Clear();
  multi_topics_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_id()) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (has_ncid()) {
      GOOGLE_DCHECK(!ncid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ncid_.UnsafeRawStringPointer())->clear();
    }
    if (has_attributes()) {
      GOOGLE_DCHECK(attributes_ != NULL);
      attributes_->::index_system::pb::Feature::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&feedback_gmp_, 0, reinterpret_cast<char*>(&isdel_) -
      reinterpret_cast<char*>(&feedback_gmp_) + sizeof(isdel_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&build_inc_, 0, reinterpret_cast<char*>(&newsy_score_) -
      reinterpret_cast<char*>(&build_inc_) + sizeof(newsy_score_));
  }
  if (_has_bits_[16 / 32] & 983040u) {
    ::memset(&publisher_hash_, 0, reinterpret_cast<char*>(&cp_expire_type_) -
      reinterpret_cast<char*>(&publisher_hash_) + sizeof(cp_expire_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Document::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      NewPermanentCallback(
          &MutableUnknownFieldsForDocument, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:index_system.pb.Document)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .index_system.pb.Feature keywords = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_keywords()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .index_system.pb.Feature categories = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_categories()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional .index_system.pb.Feature attributes = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .index_system.pb.Field fields = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fields()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // required bool isdel = 5 [default = false];
      case 5: {
        if (tag == 40u) {
          set_has_isdel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string id = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double feedback_gmp = 7;
      case 7: {
        if (tag == 57u) {
          set_has_feedback_gmp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &feedback_gmp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 publish_time = 8;
      case 8: {
        if (tag == 64u) {
          set_has_publish_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &publish_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string ncid = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ncid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 update_time = 10 [default = 0];
      case 10: {
        if (tag == 80u) {
          set_has_update_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string product_id = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_product_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 update_type = 12 [default = 0];
      case 12: {
        if (tag == 96u) {
          set_has_update_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 expire_age_hour = 13 [default = 0];
      case 13: {
        if (tag == 104u) {
          set_has_expire_age_hour();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expire_age_hour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 build_count = 14 [default = 0];
      case 14: {
        if (tag == 112u) {
          set_has_build_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &build_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double multi_gmp = 15;
      case 15: {
        if (tag == 121u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 121u, input, this->mutable_multi_gmp())));
        } else if (tag == 122u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_multi_gmp())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 expire_time = 16 [default = 0];
      case 16: {
        if (tag == 128u) {
          set_has_expire_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expire_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 feed_version = 17;
      case 17: {
        if (tag == 136u) {
          set_has_feed_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &feed_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .index_system.pb.Feature topics = 18;
      case 18: {
        if (tag == 146u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_topics()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional bool build_inc = 19;
      case 19: {
        if (tag == 152u) {
          set_has_build_inc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &build_inc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 gmp_update = 20;
      case 20: {
        if (tag == 160u) {
          set_has_gmp_update();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gmp_update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .index_system.pb.Feature ventities = 21;
      case 21: {
        if (tag == 170u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ventities()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated uint64 lr_fea_hashes = 22;
      case 22: {
        if (tag == 176u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 176u, input, this->mutable_lr_fea_hashes())));
        } else if (tag == 178u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_lr_fea_hashes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .index_system.pb.Feature title_entities = 23;
      case 23: {
        if (tag == 186u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_title_entities()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional double quality = 24;
      case 24: {
        if (tag == 193u) {
          set_has_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double newsy_score = 25;
      case 25: {
        if (tag == 201u) {
          set_has_newsy_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &newsy_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .index_system.pb.Field response_fields = 26;
      case 26: {
        if (tag == 210u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_response_fields()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional uint64 publisher_hash = 27;
      case 27: {
        if (tag == 216u) {
          set_has_publisher_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publisher_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 groupid_hash = 28;
      case 28: {
        if (tag == 224u) {
          set_has_groupid_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cp_expire_type = 29;
      case 29: {
        if (tag == 232u) {
          set_has_cp_expire_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cp_expire_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .index_system.pb.Features multi_categories = 30;
      case 30: {
        if (tag == 242u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_multi_categories()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional uint64 media_level = 31;
      case 31: {
        if (tag == 248u) {
          set_has_media_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &media_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .index_system.pb.Feature real_title_entities = 32;
      case 32: {
        if (tag == 258u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_real_title_entities()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .index_system.pb.Feature ve_re_te_intersection = 33;
      case 33: {
        if (tag == 266u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ve_re_te_intersection()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .index_system.pb.Features multi_topics = 34;
      case 34: {
        if (tag == 274u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_multi_topics()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:index_system.pb.Document)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:index_system.pb.Document)
  return false;
#undef DO_
}

void Document::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:index_system.pb.Document)
  // repeated .index_system.pb.Feature keywords = 1;
  for (unsigned int i = 0, n = this->keywords_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->keywords(i), output);
  }

  // repeated .index_system.pb.Feature categories = 2;
  for (unsigned int i = 0, n = this->categories_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->categories(i), output);
  }

  // optional .index_system.pb.Feature attributes = 3;
  if (has_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->attributes_, output);
  }

  // repeated .index_system.pb.Field fields = 4;
  for (unsigned int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->fields(i), output);
  }

  // required bool isdel = 5 [default = false];
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isdel(), output);
  }

  // required string id = 6;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->id(), output);
  }

  // required double feedback_gmp = 7;
  if (has_feedback_gmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->feedback_gmp(), output);
  }

  // required int64 publish_time = 8;
  if (has_publish_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->publish_time(), output);
  }

  // required string ncid = 9;
  if (has_ncid()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->ncid(), output);
  }

  // optional int64 update_time = 10 [default = 0];
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->update_time(), output);
  }

  // repeated string product_id = 11;
  for (int i = 0; i < this->product_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->product_id(i), output);
  }

  // optional int32 update_type = 12 [default = 0];
  if (has_update_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->update_type(), output);
  }

  // optional int32 expire_age_hour = 13 [default = 0];
  if (has_expire_age_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->expire_age_hour(), output);
  }

  // optional int32 build_count = 14 [default = 0];
  if (has_build_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->build_count(), output);
  }

  // repeated double multi_gmp = 15;
  for (int i = 0; i < this->multi_gmp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      15, this->multi_gmp(i), output);
  }

  // optional int64 expire_time = 16 [default = 0];
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->expire_time(), output);
  }

  // optional int64 feed_version = 17;
  if (has_feed_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->feed_version(), output);
  }

  // repeated .index_system.pb.Feature topics = 18;
  for (unsigned int i = 0, n = this->topics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->topics(i), output);
  }

  // optional bool build_inc = 19;
  if (has_build_inc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->build_inc(), output);
  }

  // optional int64 gmp_update = 20;
  if (has_gmp_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->gmp_update(), output);
  }

  // repeated .index_system.pb.Feature ventities = 21;
  for (unsigned int i = 0, n = this->ventities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->ventities(i), output);
  }

  // repeated uint64 lr_fea_hashes = 22;
  for (int i = 0; i < this->lr_fea_hashes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      22, this->lr_fea_hashes(i), output);
  }

  // repeated .index_system.pb.Feature title_entities = 23;
  for (unsigned int i = 0, n = this->title_entities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      23, this->title_entities(i), output);
  }

  // optional double quality = 24;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->quality(), output);
  }

  // optional double newsy_score = 25;
  if (has_newsy_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->newsy_score(), output);
  }

  // repeated .index_system.pb.Field response_fields = 26;
  for (unsigned int i = 0, n = this->response_fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      26, this->response_fields(i), output);
  }

  // optional uint64 publisher_hash = 27;
  if (has_publisher_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(27, this->publisher_hash(), output);
  }

  // optional uint64 groupid_hash = 28;
  if (has_groupid_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(28, this->groupid_hash(), output);
  }

  // optional uint32 cp_expire_type = 29;
  if (has_cp_expire_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->cp_expire_type(), output);
  }

  // repeated .index_system.pb.Features multi_categories = 30;
  for (unsigned int i = 0, n = this->multi_categories_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30, this->multi_categories(i), output);
  }

  // optional uint64 media_level = 31;
  if (has_media_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(31, this->media_level(), output);
  }

  // repeated .index_system.pb.Feature real_title_entities = 32;
  for (unsigned int i = 0, n = this->real_title_entities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      32, this->real_title_entities(i), output);
  }

  // repeated .index_system.pb.Feature ve_re_te_intersection = 33;
  for (unsigned int i = 0, n = this->ve_re_te_intersection_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      33, this->ve_re_te_intersection(i), output);
  }

  // repeated .index_system.pb.Features multi_topics = 34;
  for (unsigned int i = 0, n = this->multi_topics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      34, this->multi_topics(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:index_system.pb.Document)
}

size_t Document::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:index_system.pb.Document)
  size_t total_size = 0;

  if (has_id()) {
    // required string id = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_ncid()) {
    // required string ncid = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ncid());
  }

  if (has_feedback_gmp()) {
    // required double feedback_gmp = 7;
    total_size += 1 + 8;
  }

  if (has_publish_time()) {
    // required int64 publish_time = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->publish_time());
  }

  if (has_isdel()) {
    // required bool isdel = 5 [default = false];
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Document::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:index_system.pb.Document)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x0000009b) ^ 0x0000009b) == 0) {  // All required fields are present.
    // required string id = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required string ncid = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ncid());

    // required double feedback_gmp = 7;
    total_size += 1 + 8;

    // required int64 publish_time = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->publish_time());

    // required bool isdel = 5 [default = false];
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .index_system.pb.Feature keywords = 1;
  {
    unsigned int count = this->keywords_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keywords(i));
    }
  }

  // repeated .index_system.pb.Feature categories = 2;
  {
    unsigned int count = this->categories_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->categories(i));
    }
  }

  // repeated .index_system.pb.Field fields = 4;
  {
    unsigned int count = this->fields_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fields(i));
    }
  }

  // repeated string product_id = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->product_id_size());
  for (int i = 0; i < this->product_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->product_id(i));
  }

  // repeated double multi_gmp = 15;
  {
    unsigned int count = this->multi_gmp_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->multi_gmp_size());
    total_size += data_size;
  }

  // repeated .index_system.pb.Feature topics = 18;
  {
    unsigned int count = this->topics_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topics(i));
    }
  }

  // repeated .index_system.pb.Feature ventities = 21;
  {
    unsigned int count = this->ventities_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ventities(i));
    }
  }

  // repeated uint64 lr_fea_hashes = 22;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->lr_fea_hashes_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->lr_fea_hashes_size());
    total_size += data_size;
  }

  // repeated .index_system.pb.Feature title_entities = 23;
  {
    unsigned int count = this->title_entities_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->title_entities(i));
    }
  }

  // repeated .index_system.pb.Field response_fields = 26;
  {
    unsigned int count = this->response_fields_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response_fields(i));
    }
  }

  // repeated .index_system.pb.Features multi_categories = 30;
  {
    unsigned int count = this->multi_categories_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->multi_categories(i));
    }
  }

  // repeated .index_system.pb.Feature real_title_entities = 32;
  {
    unsigned int count = this->real_title_entities_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->real_title_entities(i));
    }
  }

  // repeated .index_system.pb.Feature ve_re_te_intersection = 33;
  {
    unsigned int count = this->ve_re_te_intersection_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ve_re_te_intersection(i));
    }
  }

  // repeated .index_system.pb.Features multi_topics = 34;
  {
    unsigned int count = this->multi_topics_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->multi_topics(i));
    }
  }

  // optional .index_system.pb.Feature attributes = 3;
  if (has_attributes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->attributes_);
  }

  if (_has_bits_[0 / 32] & 96u) {
    // optional int64 update_time = 10 [default = 0];
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->update_time());
    }

    // optional int32 update_type = 12 [default = 0];
    if (has_update_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_type());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool build_inc = 19;
    if (has_build_inc()) {
      total_size += 2 + 1;
    }

    // optional int32 expire_age_hour = 13 [default = 0];
    if (has_expire_age_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expire_age_hour());
    }

    // optional int32 build_count = 14 [default = 0];
    if (has_build_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->build_count());
    }

    // optional int64 expire_time = 16 [default = 0];
    if (has_expire_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expire_time());
    }

    // optional int64 feed_version = 17;
    if (has_feed_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->feed_version());
    }

    // optional int64 gmp_update = 20;
    if (has_gmp_update()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gmp_update());
    }

    // optional double quality = 24;
    if (has_quality()) {
      total_size += 2 + 8;
    }

    // optional double newsy_score = 25;
    if (has_newsy_score()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional uint64 publisher_hash = 27;
    if (has_publisher_hash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->publisher_hash());
    }

    // optional uint64 groupid_hash = 28;
    if (has_groupid_hash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid_hash());
    }

    // optional uint64 media_level = 31;
    if (has_media_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->media_level());
    }

    // optional uint32 cp_expire_type = 29;
    if (has_cp_expire_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cp_expire_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Document::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Document*>(&from));
}

void Document::MergeFrom(const Document& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:index_system.pb.Document)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keywords_.MergeFrom(from.keywords_);
  categories_.MergeFrom(from.categories_);
  fields_.MergeFrom(from.fields_);
  product_id_.MergeFrom(from.product_id_);
  multi_gmp_.MergeFrom(from.multi_gmp_);
  topics_.MergeFrom(from.topics_);
  ventities_.MergeFrom(from.ventities_);
  lr_fea_hashes_.MergeFrom(from.lr_fea_hashes_);
  title_entities_.MergeFrom(from.title_entities_);
  response_fields_.MergeFrom(from.response_fields_);
  multi_categories_.MergeFrom(from.multi_categories_);
  real_title_entities_.MergeFrom(from.real_title_entities_);
  ve_re_te_intersection_.MergeFrom(from.ve_re_te_intersection_);
  multi_topics_.MergeFrom(from.multi_topics_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_ncid()) {
      set_has_ncid();
      ncid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ncid_);
    }
    if (from.has_attributes()) {
      mutable_attributes()->::index_system::pb::Feature::MergeFrom(from.attributes());
    }
    if (from.has_feedback_gmp()) {
      set_feedback_gmp(from.feedback_gmp());
    }
    if (from.has_publish_time()) {
      set_publish_time(from.publish_time());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_update_type()) {
      set_update_type(from.update_type());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
  }
  if (from._has_bits_[8 / 32] & 65280u) {
    if (from.has_build_inc()) {
      set_build_inc(from.build_inc());
    }
    if (from.has_expire_age_hour()) {
      set_expire_age_hour(from.expire_age_hour());
    }
    if (from.has_build_count()) {
      set_build_count(from.build_count());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_feed_version()) {
      set_feed_version(from.feed_version());
    }
    if (from.has_gmp_update()) {
      set_gmp_update(from.gmp_update());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_newsy_score()) {
      set_newsy_score(from.newsy_score());
    }
  }
  if (from._has_bits_[16 / 32] & 983040u) {
    if (from.has_publisher_hash()) {
      set_publisher_hash(from.publisher_hash());
    }
    if (from.has_groupid_hash()) {
      set_groupid_hash(from.groupid_hash());
    }
    if (from.has_media_level()) {
      set_media_level(from.media_level());
    }
    if (from.has_cp_expire_type()) {
      set_cp_expire_type(from.cp_expire_type());
    }
  }
}

void Document::CopyFrom(const Document& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:index_system.pb.Document)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000009b) != 0x0000009b) return false;
  return true;
}

void Document::Swap(Document* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Document::InternalSwap(Document* other) {
  keywords_.UnsafeArenaSwap(&other->keywords_);
  categories_.UnsafeArenaSwap(&other->categories_);
  fields_.UnsafeArenaSwap(&other->fields_);
  product_id_.UnsafeArenaSwap(&other->product_id_);
  multi_gmp_.UnsafeArenaSwap(&other->multi_gmp_);
  topics_.UnsafeArenaSwap(&other->topics_);
  ventities_.UnsafeArenaSwap(&other->ventities_);
  lr_fea_hashes_.UnsafeArenaSwap(&other->lr_fea_hashes_);
  title_entities_.UnsafeArenaSwap(&other->title_entities_);
  response_fields_.UnsafeArenaSwap(&other->response_fields_);
  multi_categories_.UnsafeArenaSwap(&other->multi_categories_);
  real_title_entities_.UnsafeArenaSwap(&other->real_title_entities_);
  ve_re_te_intersection_.UnsafeArenaSwap(&other->ve_re_te_intersection_);
  multi_topics_.UnsafeArenaSwap(&other->multi_topics_);
  id_.Swap(&other->id_);
  ncid_.Swap(&other->ncid_);
  std::swap(attributes_, other->attributes_);
  std::swap(feedback_gmp_, other->feedback_gmp_);
  std::swap(publish_time_, other->publish_time_);
  std::swap(update_time_, other->update_time_);
  std::swap(update_type_, other->update_type_);
  std::swap(isdel_, other->isdel_);
  std::swap(build_inc_, other->build_inc_);
  std::swap(expire_age_hour_, other->expire_age_hour_);
  std::swap(build_count_, other->build_count_);
  std::swap(expire_time_, other->expire_time_);
  std::swap(feed_version_, other->feed_version_);
  std::swap(gmp_update_, other->gmp_update_);
  std::swap(quality_, other->quality_);
  std::swap(newsy_score_, other->newsy_score_);
  std::swap(publisher_hash_, other->publisher_hash_);
  std::swap(groupid_hash_, other->groupid_hash_);
  std::swap(media_level_, other->media_level_);
  std::swap(cp_expire_type_, other->cp_expire_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Document::GetTypeName() const {
  return "index_system.pb.Document";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Document

// repeated .index_system.pb.Feature keywords = 1;
int Document::keywords_size() const {
  return keywords_.size();
}
void Document::clear_keywords() {
  keywords_.Clear();
}
const ::index_system::pb::Feature& Document::keywords(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.keywords)
  return keywords_.Get(index);
}
::index_system::pb::Feature* Document::mutable_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.keywords)
  return keywords_.Mutable(index);
}
::index_system::pb::Feature* Document::add_keywords() {
  // @@protoc_insertion_point(field_add:index_system.pb.Document.keywords)
  return keywords_.Add();
}
::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >*
Document::mutable_keywords() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Document.keywords)
  return &keywords_;
}
const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >&
Document::keywords() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Document.keywords)
  return keywords_;
}

// repeated .index_system.pb.Feature categories = 2;
int Document::categories_size() const {
  return categories_.size();
}
void Document::clear_categories() {
  categories_.Clear();
}
const ::index_system::pb::Feature& Document::categories(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.categories)
  return categories_.Get(index);
}
::index_system::pb::Feature* Document::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.categories)
  return categories_.Mutable(index);
}
::index_system::pb::Feature* Document::add_categories() {
  // @@protoc_insertion_point(field_add:index_system.pb.Document.categories)
  return categories_.Add();
}
::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >*
Document::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Document.categories)
  return &categories_;
}
const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >&
Document::categories() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Document.categories)
  return categories_;
}

// optional .index_system.pb.Feature attributes = 3;
bool Document::has_attributes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Document::set_has_attributes() {
  _has_bits_[0] |= 0x00000004u;
}
void Document::clear_has_attributes() {
  _has_bits_[0] &= ~0x00000004u;
}
void Document::clear_attributes() {
  if (attributes_ != NULL) attributes_->::index_system::pb::Feature::Clear();
  clear_has_attributes();
}
const ::index_system::pb::Feature& Document::attributes() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.attributes)
  return attributes_ != NULL ? *attributes_
                         : *::index_system::pb::Feature::internal_default_instance();
}
::index_system::pb::Feature* Document::mutable_attributes() {
  set_has_attributes();
  if (attributes_ == NULL) {
    attributes_ = new ::index_system::pb::Feature;
  }
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.attributes)
  return attributes_;
}
::index_system::pb::Feature* Document::release_attributes() {
  // @@protoc_insertion_point(field_release:index_system.pb.Document.attributes)
  clear_has_attributes();
  ::index_system::pb::Feature* temp = attributes_;
  attributes_ = NULL;
  return temp;
}
void Document::set_allocated_attributes(::index_system::pb::Feature* attributes) {
  delete attributes_;
  attributes_ = attributes;
  if (attributes) {
    set_has_attributes();
  } else {
    clear_has_attributes();
  }
  // @@protoc_insertion_point(field_set_allocated:index_system.pb.Document.attributes)
}

// repeated .index_system.pb.Field fields = 4;
int Document::fields_size() const {
  return fields_.size();
}
void Document::clear_fields() {
  fields_.Clear();
}
const ::index_system::pb::Field& Document::fields(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.fields)
  return fields_.Get(index);
}
::index_system::pb::Field* Document::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.fields)
  return fields_.Mutable(index);
}
::index_system::pb::Field* Document::add_fields() {
  // @@protoc_insertion_point(field_add:index_system.pb.Document.fields)
  return fields_.Add();
}
::google::protobuf::RepeatedPtrField< ::index_system::pb::Field >*
Document::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Document.fields)
  return &fields_;
}
const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Field >&
Document::fields() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Document.fields)
  return fields_;
}

// required bool isdel = 5 [default = false];
bool Document::has_isdel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Document::set_has_isdel() {
  _has_bits_[0] |= 0x00000080u;
}
void Document::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000080u;
}
void Document::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
bool Document::isdel() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.isdel)
  return isdel_;
}
void Document::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.isdel)
}

// required string id = 6;
bool Document::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Document::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Document::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Document::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& Document::id() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.id)
  return id_.GetNoArena();
}
void Document::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:index_system.pb.Document.id)
}
#if LANG_CXX11
void Document::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:index_system.pb.Document.id)
}
#endif
void Document::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:index_system.pb.Document.id)
}
void Document::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:index_system.pb.Document.id)
}
::std::string* Document::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Document::release_id() {
  // @@protoc_insertion_point(field_release:index_system.pb.Document.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Document::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:index_system.pb.Document.id)
}

// required double feedback_gmp = 7;
bool Document::has_feedback_gmp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Document::set_has_feedback_gmp() {
  _has_bits_[0] |= 0x00000008u;
}
void Document::clear_has_feedback_gmp() {
  _has_bits_[0] &= ~0x00000008u;
}
void Document::clear_feedback_gmp() {
  feedback_gmp_ = 0;
  clear_has_feedback_gmp();
}
double Document::feedback_gmp() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.feedback_gmp)
  return feedback_gmp_;
}
void Document::set_feedback_gmp(double value) {
  set_has_feedback_gmp();
  feedback_gmp_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.feedback_gmp)
}

// required int64 publish_time = 8;
bool Document::has_publish_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Document::set_has_publish_time() {
  _has_bits_[0] |= 0x00000010u;
}
void Document::clear_has_publish_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void Document::clear_publish_time() {
  publish_time_ = GOOGLE_LONGLONG(0);
  clear_has_publish_time();
}
::google::protobuf::int64 Document::publish_time() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.publish_time)
  return publish_time_;
}
void Document::set_publish_time(::google::protobuf::int64 value) {
  set_has_publish_time();
  publish_time_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.publish_time)
}

// required string ncid = 9;
bool Document::has_ncid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Document::set_has_ncid() {
  _has_bits_[0] |= 0x00000002u;
}
void Document::clear_has_ncid() {
  _has_bits_[0] &= ~0x00000002u;
}
void Document::clear_ncid() {
  ncid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ncid();
}
const ::std::string& Document::ncid() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.ncid)
  return ncid_.GetNoArena();
}
void Document::set_ncid(const ::std::string& value) {
  set_has_ncid();
  ncid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:index_system.pb.Document.ncid)
}
#if LANG_CXX11
void Document::set_ncid(::std::string&& value) {
  set_has_ncid();
  ncid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:index_system.pb.Document.ncid)
}
#endif
void Document::set_ncid(const char* value) {
  set_has_ncid();
  ncid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:index_system.pb.Document.ncid)
}
void Document::set_ncid(const char* value, size_t size) {
  set_has_ncid();
  ncid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:index_system.pb.Document.ncid)
}
::std::string* Document::mutable_ncid() {
  set_has_ncid();
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.ncid)
  return ncid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Document::release_ncid() {
  // @@protoc_insertion_point(field_release:index_system.pb.Document.ncid)
  clear_has_ncid();
  return ncid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Document::set_allocated_ncid(::std::string* ncid) {
  if (ncid != NULL) {
    set_has_ncid();
  } else {
    clear_has_ncid();
  }
  ncid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ncid);
  // @@protoc_insertion_point(field_set_allocated:index_system.pb.Document.ncid)
}

// optional int64 update_time = 10 [default = 0];
bool Document::has_update_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Document::set_has_update_time() {
  _has_bits_[0] |= 0x00000020u;
}
void Document::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void Document::clear_update_time() {
  update_time_ = GOOGLE_LONGLONG(0);
  clear_has_update_time();
}
::google::protobuf::int64 Document::update_time() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.update_time)
  return update_time_;
}
void Document::set_update_time(::google::protobuf::int64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.update_time)
}

// repeated string product_id = 11;
int Document::product_id_size() const {
  return product_id_.size();
}
void Document::clear_product_id() {
  product_id_.Clear();
}
const ::std::string& Document::product_id(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.product_id)
  return product_id_.Get(index);
}
::std::string* Document::mutable_product_id(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.product_id)
  return product_id_.Mutable(index);
}
void Document::set_product_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:index_system.pb.Document.product_id)
  product_id_.Mutable(index)->assign(value);
}
void Document::set_product_id(int index, const char* value) {
  product_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:index_system.pb.Document.product_id)
}
void Document::set_product_id(int index, const char* value, size_t size) {
  product_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:index_system.pb.Document.product_id)
}
::std::string* Document::add_product_id() {
  // @@protoc_insertion_point(field_add_mutable:index_system.pb.Document.product_id)
  return product_id_.Add();
}
void Document::add_product_id(const ::std::string& value) {
  product_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:index_system.pb.Document.product_id)
}
void Document::add_product_id(const char* value) {
  product_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:index_system.pb.Document.product_id)
}
void Document::add_product_id(const char* value, size_t size) {
  product_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:index_system.pb.Document.product_id)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Document::product_id() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Document.product_id)
  return product_id_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Document::mutable_product_id() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Document.product_id)
  return &product_id_;
}

// optional int32 update_type = 12 [default = 0];
bool Document::has_update_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Document::set_has_update_type() {
  _has_bits_[0] |= 0x00000040u;
}
void Document::clear_has_update_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void Document::clear_update_type() {
  update_type_ = 0;
  clear_has_update_type();
}
::google::protobuf::int32 Document::update_type() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.update_type)
  return update_type_;
}
void Document::set_update_type(::google::protobuf::int32 value) {
  set_has_update_type();
  update_type_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.update_type)
}

// optional int32 expire_age_hour = 13 [default = 0];
bool Document::has_expire_age_hour() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Document::set_has_expire_age_hour() {
  _has_bits_[0] |= 0x00000200u;
}
void Document::clear_has_expire_age_hour() {
  _has_bits_[0] &= ~0x00000200u;
}
void Document::clear_expire_age_hour() {
  expire_age_hour_ = 0;
  clear_has_expire_age_hour();
}
::google::protobuf::int32 Document::expire_age_hour() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.expire_age_hour)
  return expire_age_hour_;
}
void Document::set_expire_age_hour(::google::protobuf::int32 value) {
  set_has_expire_age_hour();
  expire_age_hour_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.expire_age_hour)
}

// optional int32 build_count = 14 [default = 0];
bool Document::has_build_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Document::set_has_build_count() {
  _has_bits_[0] |= 0x00000400u;
}
void Document::clear_has_build_count() {
  _has_bits_[0] &= ~0x00000400u;
}
void Document::clear_build_count() {
  build_count_ = 0;
  clear_has_build_count();
}
::google::protobuf::int32 Document::build_count() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.build_count)
  return build_count_;
}
void Document::set_build_count(::google::protobuf::int32 value) {
  set_has_build_count();
  build_count_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.build_count)
}

// repeated double multi_gmp = 15;
int Document::multi_gmp_size() const {
  return multi_gmp_.size();
}
void Document::clear_multi_gmp() {
  multi_gmp_.Clear();
}
double Document::multi_gmp(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.multi_gmp)
  return multi_gmp_.Get(index);
}
void Document::set_multi_gmp(int index, double value) {
  multi_gmp_.Set(index, value);
  // @@protoc_insertion_point(field_set:index_system.pb.Document.multi_gmp)
}
void Document::add_multi_gmp(double value) {
  multi_gmp_.Add(value);
  // @@protoc_insertion_point(field_add:index_system.pb.Document.multi_gmp)
}
const ::google::protobuf::RepeatedField< double >&
Document::multi_gmp() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Document.multi_gmp)
  return multi_gmp_;
}
::google::protobuf::RepeatedField< double >*
Document::mutable_multi_gmp() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Document.multi_gmp)
  return &multi_gmp_;
}

// optional int64 expire_time = 16 [default = 0];
bool Document::has_expire_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Document::set_has_expire_time() {
  _has_bits_[0] |= 0x00000800u;
}
void Document::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000800u;
}
void Document::clear_expire_time() {
  expire_time_ = GOOGLE_LONGLONG(0);
  clear_has_expire_time();
}
::google::protobuf::int64 Document::expire_time() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.expire_time)
  return expire_time_;
}
void Document::set_expire_time(::google::protobuf::int64 value) {
  set_has_expire_time();
  expire_time_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.expire_time)
}

// optional int64 feed_version = 17;
bool Document::has_feed_version() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Document::set_has_feed_version() {
  _has_bits_[0] |= 0x00001000u;
}
void Document::clear_has_feed_version() {
  _has_bits_[0] &= ~0x00001000u;
}
void Document::clear_feed_version() {
  feed_version_ = GOOGLE_LONGLONG(0);
  clear_has_feed_version();
}
::google::protobuf::int64 Document::feed_version() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.feed_version)
  return feed_version_;
}
void Document::set_feed_version(::google::protobuf::int64 value) {
  set_has_feed_version();
  feed_version_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.feed_version)
}

// repeated .index_system.pb.Feature topics = 18;
int Document::topics_size() const {
  return topics_.size();
}
void Document::clear_topics() {
  topics_.Clear();
}
const ::index_system::pb::Feature& Document::topics(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.topics)
  return topics_.Get(index);
}
::index_system::pb::Feature* Document::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.topics)
  return topics_.Mutable(index);
}
::index_system::pb::Feature* Document::add_topics() {
  // @@protoc_insertion_point(field_add:index_system.pb.Document.topics)
  return topics_.Add();
}
::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >*
Document::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Document.topics)
  return &topics_;
}
const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >&
Document::topics() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Document.topics)
  return topics_;
}

// optional bool build_inc = 19;
bool Document::has_build_inc() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Document::set_has_build_inc() {
  _has_bits_[0] |= 0x00000100u;
}
void Document::clear_has_build_inc() {
  _has_bits_[0] &= ~0x00000100u;
}
void Document::clear_build_inc() {
  build_inc_ = false;
  clear_has_build_inc();
}
bool Document::build_inc() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.build_inc)
  return build_inc_;
}
void Document::set_build_inc(bool value) {
  set_has_build_inc();
  build_inc_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.build_inc)
}

// optional int64 gmp_update = 20;
bool Document::has_gmp_update() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Document::set_has_gmp_update() {
  _has_bits_[0] |= 0x00002000u;
}
void Document::clear_has_gmp_update() {
  _has_bits_[0] &= ~0x00002000u;
}
void Document::clear_gmp_update() {
  gmp_update_ = GOOGLE_LONGLONG(0);
  clear_has_gmp_update();
}
::google::protobuf::int64 Document::gmp_update() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.gmp_update)
  return gmp_update_;
}
void Document::set_gmp_update(::google::protobuf::int64 value) {
  set_has_gmp_update();
  gmp_update_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.gmp_update)
}

// repeated .index_system.pb.Feature ventities = 21;
int Document::ventities_size() const {
  return ventities_.size();
}
void Document::clear_ventities() {
  ventities_.Clear();
}
const ::index_system::pb::Feature& Document::ventities(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.ventities)
  return ventities_.Get(index);
}
::index_system::pb::Feature* Document::mutable_ventities(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.ventities)
  return ventities_.Mutable(index);
}
::index_system::pb::Feature* Document::add_ventities() {
  // @@protoc_insertion_point(field_add:index_system.pb.Document.ventities)
  return ventities_.Add();
}
::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >*
Document::mutable_ventities() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Document.ventities)
  return &ventities_;
}
const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >&
Document::ventities() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Document.ventities)
  return ventities_;
}

// repeated uint64 lr_fea_hashes = 22;
int Document::lr_fea_hashes_size() const {
  return lr_fea_hashes_.size();
}
void Document::clear_lr_fea_hashes() {
  lr_fea_hashes_.Clear();
}
::google::protobuf::uint64 Document::lr_fea_hashes(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.lr_fea_hashes)
  return lr_fea_hashes_.Get(index);
}
void Document::set_lr_fea_hashes(int index, ::google::protobuf::uint64 value) {
  lr_fea_hashes_.Set(index, value);
  // @@protoc_insertion_point(field_set:index_system.pb.Document.lr_fea_hashes)
}
void Document::add_lr_fea_hashes(::google::protobuf::uint64 value) {
  lr_fea_hashes_.Add(value);
  // @@protoc_insertion_point(field_add:index_system.pb.Document.lr_fea_hashes)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Document::lr_fea_hashes() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Document.lr_fea_hashes)
  return lr_fea_hashes_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Document::mutable_lr_fea_hashes() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Document.lr_fea_hashes)
  return &lr_fea_hashes_;
}

// repeated .index_system.pb.Feature title_entities = 23;
int Document::title_entities_size() const {
  return title_entities_.size();
}
void Document::clear_title_entities() {
  title_entities_.Clear();
}
const ::index_system::pb::Feature& Document::title_entities(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.title_entities)
  return title_entities_.Get(index);
}
::index_system::pb::Feature* Document::mutable_title_entities(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.title_entities)
  return title_entities_.Mutable(index);
}
::index_system::pb::Feature* Document::add_title_entities() {
  // @@protoc_insertion_point(field_add:index_system.pb.Document.title_entities)
  return title_entities_.Add();
}
::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >*
Document::mutable_title_entities() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Document.title_entities)
  return &title_entities_;
}
const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >&
Document::title_entities() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Document.title_entities)
  return title_entities_;
}

// optional double quality = 24;
bool Document::has_quality() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Document::set_has_quality() {
  _has_bits_[0] |= 0x00004000u;
}
void Document::clear_has_quality() {
  _has_bits_[0] &= ~0x00004000u;
}
void Document::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
double Document::quality() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.quality)
  return quality_;
}
void Document::set_quality(double value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.quality)
}

// optional double newsy_score = 25;
bool Document::has_newsy_score() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Document::set_has_newsy_score() {
  _has_bits_[0] |= 0x00008000u;
}
void Document::clear_has_newsy_score() {
  _has_bits_[0] &= ~0x00008000u;
}
void Document::clear_newsy_score() {
  newsy_score_ = 0;
  clear_has_newsy_score();
}
double Document::newsy_score() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.newsy_score)
  return newsy_score_;
}
void Document::set_newsy_score(double value) {
  set_has_newsy_score();
  newsy_score_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.newsy_score)
}

// repeated .index_system.pb.Field response_fields = 26;
int Document::response_fields_size() const {
  return response_fields_.size();
}
void Document::clear_response_fields() {
  response_fields_.Clear();
}
const ::index_system::pb::Field& Document::response_fields(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.response_fields)
  return response_fields_.Get(index);
}
::index_system::pb::Field* Document::mutable_response_fields(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.response_fields)
  return response_fields_.Mutable(index);
}
::index_system::pb::Field* Document::add_response_fields() {
  // @@protoc_insertion_point(field_add:index_system.pb.Document.response_fields)
  return response_fields_.Add();
}
::google::protobuf::RepeatedPtrField< ::index_system::pb::Field >*
Document::mutable_response_fields() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Document.response_fields)
  return &response_fields_;
}
const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Field >&
Document::response_fields() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Document.response_fields)
  return response_fields_;
}

// optional uint64 publisher_hash = 27;
bool Document::has_publisher_hash() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Document::set_has_publisher_hash() {
  _has_bits_[0] |= 0x00010000u;
}
void Document::clear_has_publisher_hash() {
  _has_bits_[0] &= ~0x00010000u;
}
void Document::clear_publisher_hash() {
  publisher_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_publisher_hash();
}
::google::protobuf::uint64 Document::publisher_hash() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.publisher_hash)
  return publisher_hash_;
}
void Document::set_publisher_hash(::google::protobuf::uint64 value) {
  set_has_publisher_hash();
  publisher_hash_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.publisher_hash)
}

// optional uint64 groupid_hash = 28;
bool Document::has_groupid_hash() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Document::set_has_groupid_hash() {
  _has_bits_[0] |= 0x00020000u;
}
void Document::clear_has_groupid_hash() {
  _has_bits_[0] &= ~0x00020000u;
}
void Document::clear_groupid_hash() {
  groupid_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid_hash();
}
::google::protobuf::uint64 Document::groupid_hash() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.groupid_hash)
  return groupid_hash_;
}
void Document::set_groupid_hash(::google::protobuf::uint64 value) {
  set_has_groupid_hash();
  groupid_hash_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.groupid_hash)
}

// optional uint32 cp_expire_type = 29;
bool Document::has_cp_expire_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Document::set_has_cp_expire_type() {
  _has_bits_[0] |= 0x00080000u;
}
void Document::clear_has_cp_expire_type() {
  _has_bits_[0] &= ~0x00080000u;
}
void Document::clear_cp_expire_type() {
  cp_expire_type_ = 0u;
  clear_has_cp_expire_type();
}
::google::protobuf::uint32 Document::cp_expire_type() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.cp_expire_type)
  return cp_expire_type_;
}
void Document::set_cp_expire_type(::google::protobuf::uint32 value) {
  set_has_cp_expire_type();
  cp_expire_type_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.cp_expire_type)
}

// repeated .index_system.pb.Features multi_categories = 30;
int Document::multi_categories_size() const {
  return multi_categories_.size();
}
void Document::clear_multi_categories() {
  multi_categories_.Clear();
}
const ::index_system::pb::Features& Document::multi_categories(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.multi_categories)
  return multi_categories_.Get(index);
}
::index_system::pb::Features* Document::mutable_multi_categories(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.multi_categories)
  return multi_categories_.Mutable(index);
}
::index_system::pb::Features* Document::add_multi_categories() {
  // @@protoc_insertion_point(field_add:index_system.pb.Document.multi_categories)
  return multi_categories_.Add();
}
::google::protobuf::RepeatedPtrField< ::index_system::pb::Features >*
Document::mutable_multi_categories() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Document.multi_categories)
  return &multi_categories_;
}
const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Features >&
Document::multi_categories() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Document.multi_categories)
  return multi_categories_;
}

// optional uint64 media_level = 31;
bool Document::has_media_level() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Document::set_has_media_level() {
  _has_bits_[0] |= 0x00040000u;
}
void Document::clear_has_media_level() {
  _has_bits_[0] &= ~0x00040000u;
}
void Document::clear_media_level() {
  media_level_ = GOOGLE_ULONGLONG(0);
  clear_has_media_level();
}
::google::protobuf::uint64 Document::media_level() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.media_level)
  return media_level_;
}
void Document::set_media_level(::google::protobuf::uint64 value) {
  set_has_media_level();
  media_level_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.media_level)
}

// repeated .index_system.pb.Feature real_title_entities = 32;
int Document::real_title_entities_size() const {
  return real_title_entities_.size();
}
void Document::clear_real_title_entities() {
  real_title_entities_.Clear();
}
const ::index_system::pb::Feature& Document::real_title_entities(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.real_title_entities)
  return real_title_entities_.Get(index);
}
::index_system::pb::Feature* Document::mutable_real_title_entities(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.real_title_entities)
  return real_title_entities_.Mutable(index);
}
::index_system::pb::Feature* Document::add_real_title_entities() {
  // @@protoc_insertion_point(field_add:index_system.pb.Document.real_title_entities)
  return real_title_entities_.Add();
}
::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >*
Document::mutable_real_title_entities() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Document.real_title_entities)
  return &real_title_entities_;
}
const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >&
Document::real_title_entities() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Document.real_title_entities)
  return real_title_entities_;
}

// repeated .index_system.pb.Feature ve_re_te_intersection = 33;
int Document::ve_re_te_intersection_size() const {
  return ve_re_te_intersection_.size();
}
void Document::clear_ve_re_te_intersection() {
  ve_re_te_intersection_.Clear();
}
const ::index_system::pb::Feature& Document::ve_re_te_intersection(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.ve_re_te_intersection)
  return ve_re_te_intersection_.Get(index);
}
::index_system::pb::Feature* Document::mutable_ve_re_te_intersection(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.ve_re_te_intersection)
  return ve_re_te_intersection_.Mutable(index);
}
::index_system::pb::Feature* Document::add_ve_re_te_intersection() {
  // @@protoc_insertion_point(field_add:index_system.pb.Document.ve_re_te_intersection)
  return ve_re_te_intersection_.Add();
}
::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >*
Document::mutable_ve_re_te_intersection() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Document.ve_re_te_intersection)
  return &ve_re_te_intersection_;
}
const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >&
Document::ve_re_te_intersection() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Document.ve_re_te_intersection)
  return ve_re_te_intersection_;
}

// repeated .index_system.pb.Features multi_topics = 34;
int Document::multi_topics_size() const {
  return multi_topics_.size();
}
void Document::clear_multi_topics() {
  multi_topics_.Clear();
}
const ::index_system::pb::Features& Document::multi_topics(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.multi_topics)
  return multi_topics_.Get(index);
}
::index_system::pb::Features* Document::mutable_multi_topics(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.multi_topics)
  return multi_topics_.Mutable(index);
}
::index_system::pb::Features* Document::add_multi_topics() {
  // @@protoc_insertion_point(field_add:index_system.pb.Document.multi_topics)
  return multi_topics_.Add();
}
::google::protobuf::RepeatedPtrField< ::index_system::pb::Features >*
Document::mutable_multi_topics() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Document.multi_topics)
  return &multi_topics_;
}
const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Features >&
Document::multi_topics() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Document.multi_topics)
  return multi_topics_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDocuments(
    Documents* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Documents::kDocumentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Documents::Documents()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_document_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:index_system.pb.Documents)
}
Documents::Documents(const Documents& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      documents_(from.documents_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:index_system.pb.Documents)
}

void Documents::SharedCtor() {
  _cached_size_ = 0;
}

Documents::~Documents() {
  // @@protoc_insertion_point(destructor:index_system.pb.Documents)
  SharedDtor();
}

void Documents::SharedDtor() {
}

void Documents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Documents& Documents::default_instance() {
  protobuf_document_2eproto::InitDefaults();
  return *internal_default_instance();
}

Documents* Documents::New(::google::protobuf::Arena* arena) const {
  Documents* n = new Documents;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Documents::Clear() {
// @@protoc_insertion_point(message_clear_start:index_system.pb.Documents)
  documents_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Documents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      NewPermanentCallback(
          &MutableUnknownFieldsForDocuments, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:index_system.pb.Documents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .index_system.pb.Document documents = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_documents()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:index_system.pb.Documents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:index_system.pb.Documents)
  return false;
#undef DO_
}

void Documents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:index_system.pb.Documents)
  // repeated .index_system.pb.Document documents = 1;
  for (unsigned int i = 0, n = this->documents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->documents(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:index_system.pb.Documents)
}

size_t Documents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:index_system.pb.Documents)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .index_system.pb.Document documents = 1;
  {
    unsigned int count = this->documents_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->documents(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Documents::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Documents*>(&from));
}

void Documents::MergeFrom(const Documents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:index_system.pb.Documents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  documents_.MergeFrom(from.documents_);
}

void Documents::CopyFrom(const Documents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:index_system.pb.Documents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Documents::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->documents())) return false;
  return true;
}

void Documents::Swap(Documents* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Documents::InternalSwap(Documents* other) {
  documents_.UnsafeArenaSwap(&other->documents_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Documents::GetTypeName() const {
  return "index_system.pb.Documents";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Documents

// repeated .index_system.pb.Document documents = 1;
int Documents::documents_size() const {
  return documents_.size();
}
void Documents::clear_documents() {
  documents_.Clear();
}
const ::index_system::pb::Document& Documents::documents(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Documents.documents)
  return documents_.Get(index);
}
::index_system::pb::Document* Documents::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.Documents.documents)
  return documents_.Mutable(index);
}
::index_system::pb::Document* Documents::add_documents() {
  // @@protoc_insertion_point(field_add:index_system.pb.Documents.documents)
  return documents_.Add();
}
::google::protobuf::RepeatedPtrField< ::index_system::pb::Document >*
Documents::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Documents.documents)
  return &documents_;
}
const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Document >&
Documents::documents() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Documents.documents)
  return documents_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace index_system

// @@protoc_insertion_point(global_scope)

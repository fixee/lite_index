// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: document.proto

#ifndef PROTOBUF_document_2eproto__INCLUDED
#define PROTOBUF_document_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
namespace index_system {
namespace pb {
class Document;
class DocumentDefaultTypeInternal;
extern DocumentDefaultTypeInternal _Document_default_instance_;
class Documents;
class DocumentsDefaultTypeInternal;
extern DocumentsDefaultTypeInternal _Documents_default_instance_;
class Feature;
class FeatureDefaultTypeInternal;
extern FeatureDefaultTypeInternal _Feature_default_instance_;
class Features;
class FeaturesDefaultTypeInternal;
extern FeaturesDefaultTypeInternal _Features_default_instance_;
class FeedDoc;
class FeedDocDefaultTypeInternal;
extern FeedDocDefaultTypeInternal _FeedDoc_default_instance_;
class Field;
class FieldDefaultTypeInternal;
extern FieldDefaultTypeInternal _Field_default_instance_;
class StringFeature;
class StringFeatureDefaultTypeInternal;
extern StringFeatureDefaultTypeInternal _StringFeature_default_instance_;
class StringFeatures;
class StringFeaturesDefaultTypeInternal;
extern StringFeaturesDefaultTypeInternal _StringFeatures_default_instance_;
}  // namespace pb
}  // namespace index_system

namespace index_system {
namespace pb {

namespace protobuf_document_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_document_2eproto

// ===================================================================

class StringFeature : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:index_system.pb.StringFeature) */ {
 public:
  StringFeature();
  virtual ~StringFeature();

  StringFeature(const StringFeature& from);

  inline StringFeature& operator=(const StringFeature& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StringFeature& default_instance();

  static inline const StringFeature* internal_default_instance() {
    return reinterpret_cast<const StringFeature*>(
               &_StringFeature_default_instance_);
  }

  void Swap(StringFeature* other);

  // implements Message ----------------------------------------------

  inline StringFeature* New() const PROTOBUF_FINAL { return New(NULL); }

  StringFeature* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const StringFeature& from);
  void MergeFrom(const StringFeature& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StringFeature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional double value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  double value() const;
  void set_value(double value);

  // @@protoc_insertion_point(class_scope:index_system.pb.StringFeature)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  double value_;
  friend struct  protobuf_document_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StringFeatures : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:index_system.pb.StringFeatures) */ {
 public:
  StringFeatures();
  virtual ~StringFeatures();

  StringFeatures(const StringFeatures& from);

  inline StringFeatures& operator=(const StringFeatures& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StringFeatures& default_instance();

  static inline const StringFeatures* internal_default_instance() {
    return reinterpret_cast<const StringFeatures*>(
               &_StringFeatures_default_instance_);
  }

  void Swap(StringFeatures* other);

  // implements Message ----------------------------------------------

  inline StringFeatures* New() const PROTOBUF_FINAL { return New(NULL); }

  StringFeatures* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const StringFeatures& from);
  void MergeFrom(const StringFeatures& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StringFeatures* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .index_system.pb.StringFeature features = 1;
  int features_size() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 1;
  const ::index_system::pb::StringFeature& features(int index) const;
  ::index_system::pb::StringFeature* mutable_features(int index);
  ::index_system::pb::StringFeature* add_features();
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >*
      mutable_features();
  const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >&
      features() const;

  // @@protoc_insertion_point(class_scope:index_system.pb.StringFeatures)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature > features_;
  friend struct  protobuf_document_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Feature : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:index_system.pb.Feature) */ {
 public:
  Feature();
  virtual ~Feature();

  Feature(const Feature& from);

  inline Feature& operator=(const Feature& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Feature& default_instance();

  static inline const Feature* internal_default_instance() {
    return reinterpret_cast<const Feature*>(
               &_Feature_default_instance_);
  }

  void Swap(Feature* other);

  // implements Message ----------------------------------------------

  inline Feature* New() const PROTOBUF_FINAL { return New(NULL); }

  Feature* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Feature& from);
  void MergeFrom(const Feature& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Feature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  ::google::protobuf::uint64 name() const;
  void set_name(::google::protobuf::uint64 value);

  // optional double value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  double value() const;
  void set_value(double value);

  // @@protoc_insertion_point(class_scope:index_system.pb.Feature)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 name_;
  double value_;
  friend struct  protobuf_document_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Features : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:index_system.pb.Features) */ {
 public:
  Features();
  virtual ~Features();

  Features(const Features& from);

  inline Features& operator=(const Features& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Features& default_instance();

  static inline const Features* internal_default_instance() {
    return reinterpret_cast<const Features*>(
               &_Features_default_instance_);
  }

  void Swap(Features* other);

  // implements Message ----------------------------------------------

  inline Features* New() const PROTOBUF_FINAL { return New(NULL); }

  Features* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Features& from);
  void MergeFrom(const Features& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Features* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .index_system.pb.Feature features = 1;
  int features_size() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 1;
  const ::index_system::pb::Feature& features(int index) const;
  ::index_system::pb::Feature* mutable_features(int index);
  ::index_system::pb::Feature* add_features();
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >*
      mutable_features();
  const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >&
      features() const;

  // @@protoc_insertion_point(class_scope:index_system.pb.Features)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature > features_;
  friend struct  protobuf_document_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Field : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:index_system.pb.Field) */ {
 public:
  Field();
  virtual ~Field();

  Field(const Field& from);

  inline Field& operator=(const Field& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Field& default_instance();

  static inline const Field* internal_default_instance() {
    return reinterpret_cast<const Field*>(
               &_Field_default_instance_);
  }

  void Swap(Field* other);

  // implements Message ----------------------------------------------

  inline Field* New() const PROTOBUF_FINAL { return New(NULL); }

  Field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Field& from);
  void MergeFrom(const Field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:index_system.pb.Field)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct  protobuf_document_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FeedDoc : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:index_system.pb.FeedDoc) */ {
 public:
  FeedDoc();
  virtual ~FeedDoc();

  FeedDoc(const FeedDoc& from);

  inline FeedDoc& operator=(const FeedDoc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FeedDoc& default_instance();

  static inline const FeedDoc* internal_default_instance() {
    return reinterpret_cast<const FeedDoc*>(
               &_FeedDoc_default_instance_);
  }

  void Swap(FeedDoc* other);

  // implements Message ----------------------------------------------

  inline FeedDoc* New() const PROTOBUF_FINAL { return New(NULL); }

  FeedDoc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const FeedDoc& from);
  void MergeFrom(const FeedDoc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeedDoc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .index_system.pb.StringFeature categories = 4;
  int categories_size() const;
  void clear_categories();
  static const int kCategoriesFieldNumber = 4;
  const ::index_system::pb::StringFeature& categories(int index) const;
  ::index_system::pb::StringFeature* mutable_categories(int index);
  ::index_system::pb::StringFeature* add_categories();
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >*
      mutable_categories();
  const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >&
      categories() const;

  // repeated .index_system.pb.StringFeature keywords = 5;
  int keywords_size() const;
  void clear_keywords();
  static const int kKeywordsFieldNumber = 5;
  const ::index_system::pb::StringFeature& keywords(int index) const;
  ::index_system::pb::StringFeature* mutable_keywords(int index);
  ::index_system::pb::StringFeature* add_keywords();
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >*
      mutable_keywords();
  const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >&
      keywords() const;

  // repeated .index_system.pb.StringFeature topics = 6;
  int topics_size() const;
  void clear_topics();
  static const int kTopicsFieldNumber = 6;
  const ::index_system::pb::StringFeature& topics(int index) const;
  ::index_system::pb::StringFeature* mutable_topics(int index);
  ::index_system::pb::StringFeature* add_topics();
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >*
      mutable_topics();
  const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >&
      topics() const;

  // repeated .index_system.pb.StringFeature ventities = 7;
  int ventities_size() const;
  void clear_ventities();
  static const int kVentitiesFieldNumber = 7;
  const ::index_system::pb::StringFeature& ventities(int index) const;
  ::index_system::pb::StringFeature* mutable_ventities(int index);
  ::index_system::pb::StringFeature* add_ventities();
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >*
      mutable_ventities();
  const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >&
      ventities() const;

  // repeated .index_system.pb.Field fields = 8;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 8;
  const ::index_system::pb::Field& fields(int index) const;
  ::index_system::pb::Field* mutable_fields(int index);
  ::index_system::pb::Field* add_fields();
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::Field >*
      mutable_fields();
  const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Field >&
      fields() const;

  // repeated .index_system.pb.StringFeature title_entities = 9;
  int title_entities_size() const;
  void clear_title_entities();
  static const int kTitleEntitiesFieldNumber = 9;
  const ::index_system::pb::StringFeature& title_entities(int index) const;
  ::index_system::pb::StringFeature* mutable_title_entities(int index);
  ::index_system::pb::StringFeature* add_title_entities();
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >*
      mutable_title_entities();
  const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >&
      title_entities() const;

  // repeated .index_system.pb.StringFeatures multi_categories = 10;
  int multi_categories_size() const;
  void clear_multi_categories();
  static const int kMultiCategoriesFieldNumber = 10;
  const ::index_system::pb::StringFeatures& multi_categories(int index) const;
  ::index_system::pb::StringFeatures* mutable_multi_categories(int index);
  ::index_system::pb::StringFeatures* add_multi_categories();
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeatures >*
      mutable_multi_categories();
  const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeatures >&
      multi_categories() const;

  // repeated .index_system.pb.StringFeature real_title_entities = 11;
  int real_title_entities_size() const;
  void clear_real_title_entities();
  static const int kRealTitleEntitiesFieldNumber = 11;
  const ::index_system::pb::StringFeature& real_title_entities(int index) const;
  ::index_system::pb::StringFeature* mutable_real_title_entities(int index);
  ::index_system::pb::StringFeature* add_real_title_entities();
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >*
      mutable_real_title_entities();
  const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >&
      real_title_entities() const;

  // repeated .index_system.pb.StringFeature ve_re_te_intersection = 12;
  int ve_re_te_intersection_size() const;
  void clear_ve_re_te_intersection();
  static const int kVeReTeIntersectionFieldNumber = 12;
  const ::index_system::pb::StringFeature& ve_re_te_intersection(int index) const;
  ::index_system::pb::StringFeature* mutable_ve_re_te_intersection(int index);
  ::index_system::pb::StringFeature* add_ve_re_te_intersection();
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >*
      mutable_ve_re_te_intersection();
  const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >&
      ve_re_te_intersection() const;

  // repeated .index_system.pb.StringFeature video_tags = 13;
  int video_tags_size() const;
  void clear_video_tags();
  static const int kVideoTagsFieldNumber = 13;
  const ::index_system::pb::StringFeature& video_tags(int index) const;
  ::index_system::pb::StringFeature* mutable_video_tags(int index);
  ::index_system::pb::StringFeature* add_video_tags();
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >*
      mutable_video_tags();
  const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >&
      video_tags() const;

  // repeated .index_system.pb.StringFeatures multi_topics = 14;
  int multi_topics_size() const;
  void clear_multi_topics();
  static const int kMultiTopicsFieldNumber = 14;
  const ::index_system::pb::StringFeatures& multi_topics(int index) const;
  ::index_system::pb::StringFeatures* mutable_multi_topics(int index);
  ::index_system::pb::StringFeatures* add_multi_topics();
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeatures >*
      mutable_multi_topics();
  const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeatures >&
      multi_topics() const;

  // required string doc_id = 1;
  bool has_doc_id() const;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 1;
  const ::std::string& doc_id() const;
  void set_doc_id(const ::std::string& value);
  #if LANG_CXX11
  void set_doc_id(::std::string&& value);
  #endif
  void set_doc_id(const char* value);
  void set_doc_id(const char* value, size_t size);
  ::std::string* mutable_doc_id();
  ::std::string* release_doc_id();
  void set_allocated_doc_id(::std::string* doc_id);

  // required int64 feed_time = 2;
  bool has_feed_time() const;
  void clear_feed_time();
  static const int kFeedTimeFieldNumber = 2;
  ::google::protobuf::int64 feed_time() const;
  void set_feed_time(::google::protobuf::int64 value);

  // required bool isdel = 3 [default = false];
  bool has_isdel() const;
  void clear_isdel();
  static const int kIsdelFieldNumber = 3;
  bool isdel() const;
  void set_isdel(bool value);

  // @@protoc_insertion_point(class_scope:index_system.pb.FeedDoc)
 private:
  void set_has_doc_id();
  void clear_has_doc_id();
  void set_has_feed_time();
  void clear_has_feed_time();
  void set_has_isdel();
  void clear_has_isdel();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature > categories_;
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature > keywords_;
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature > topics_;
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature > ventities_;
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::Field > fields_;
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature > title_entities_;
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeatures > multi_categories_;
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature > real_title_entities_;
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature > ve_re_te_intersection_;
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature > video_tags_;
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeatures > multi_topics_;
  ::google::protobuf::internal::ArenaStringPtr doc_id_;
  ::google::protobuf::int64 feed_time_;
  bool isdel_;
  friend struct  protobuf_document_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Document : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:index_system.pb.Document) */ {
 public:
  Document();
  virtual ~Document();

  Document(const Document& from);

  inline Document& operator=(const Document& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Document& default_instance();

  static inline const Document* internal_default_instance() {
    return reinterpret_cast<const Document*>(
               &_Document_default_instance_);
  }

  void Swap(Document* other);

  // implements Message ----------------------------------------------

  inline Document* New() const PROTOBUF_FINAL { return New(NULL); }

  Document* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Document& from);
  void MergeFrom(const Document& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Document* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .index_system.pb.Feature keywords = 1;
  int keywords_size() const;
  void clear_keywords();
  static const int kKeywordsFieldNumber = 1;
  const ::index_system::pb::Feature& keywords(int index) const;
  ::index_system::pb::Feature* mutable_keywords(int index);
  ::index_system::pb::Feature* add_keywords();
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >*
      mutable_keywords();
  const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >&
      keywords() const;

  // repeated .index_system.pb.Feature categories = 2;
  int categories_size() const;
  void clear_categories();
  static const int kCategoriesFieldNumber = 2;
  const ::index_system::pb::Feature& categories(int index) const;
  ::index_system::pb::Feature* mutable_categories(int index);
  ::index_system::pb::Feature* add_categories();
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >*
      mutable_categories();
  const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >&
      categories() const;

  // repeated .index_system.pb.Field fields = 4;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 4;
  const ::index_system::pb::Field& fields(int index) const;
  ::index_system::pb::Field* mutable_fields(int index);
  ::index_system::pb::Field* add_fields();
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::Field >*
      mutable_fields();
  const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Field >&
      fields() const;

  // repeated string product_id = 11;
  int product_id_size() const;
  void clear_product_id();
  static const int kProductIdFieldNumber = 11;
  const ::std::string& product_id(int index) const;
  ::std::string* mutable_product_id(int index);
  void set_product_id(int index, const ::std::string& value);
  void set_product_id(int index, const char* value);
  void set_product_id(int index, const char* value, size_t size);
  ::std::string* add_product_id();
  void add_product_id(const ::std::string& value);
  void add_product_id(const char* value);
  void add_product_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& product_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_product_id();

  // repeated double multi_gmp = 15;
  int multi_gmp_size() const;
  void clear_multi_gmp();
  static const int kMultiGmpFieldNumber = 15;
  double multi_gmp(int index) const;
  void set_multi_gmp(int index, double value);
  void add_multi_gmp(double value);
  const ::google::protobuf::RepeatedField< double >&
      multi_gmp() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_multi_gmp();

  // repeated .index_system.pb.Feature topics = 18;
  int topics_size() const;
  void clear_topics();
  static const int kTopicsFieldNumber = 18;
  const ::index_system::pb::Feature& topics(int index) const;
  ::index_system::pb::Feature* mutable_topics(int index);
  ::index_system::pb::Feature* add_topics();
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >*
      mutable_topics();
  const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >&
      topics() const;

  // repeated .index_system.pb.Feature ventities = 21;
  int ventities_size() const;
  void clear_ventities();
  static const int kVentitiesFieldNumber = 21;
  const ::index_system::pb::Feature& ventities(int index) const;
  ::index_system::pb::Feature* mutable_ventities(int index);
  ::index_system::pb::Feature* add_ventities();
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >*
      mutable_ventities();
  const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >&
      ventities() const;

  // repeated uint64 lr_fea_hashes = 22;
  int lr_fea_hashes_size() const;
  void clear_lr_fea_hashes();
  static const int kLrFeaHashesFieldNumber = 22;
  ::google::protobuf::uint64 lr_fea_hashes(int index) const;
  void set_lr_fea_hashes(int index, ::google::protobuf::uint64 value);
  void add_lr_fea_hashes(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      lr_fea_hashes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_lr_fea_hashes();

  // repeated .index_system.pb.Feature title_entities = 23;
  int title_entities_size() const;
  void clear_title_entities();
  static const int kTitleEntitiesFieldNumber = 23;
  const ::index_system::pb::Feature& title_entities(int index) const;
  ::index_system::pb::Feature* mutable_title_entities(int index);
  ::index_system::pb::Feature* add_title_entities();
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >*
      mutable_title_entities();
  const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >&
      title_entities() const;

  // repeated .index_system.pb.Field response_fields = 26;
  int response_fields_size() const;
  void clear_response_fields();
  static const int kResponseFieldsFieldNumber = 26;
  const ::index_system::pb::Field& response_fields(int index) const;
  ::index_system::pb::Field* mutable_response_fields(int index);
  ::index_system::pb::Field* add_response_fields();
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::Field >*
      mutable_response_fields();
  const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Field >&
      response_fields() const;

  // repeated .index_system.pb.Features multi_categories = 30;
  int multi_categories_size() const;
  void clear_multi_categories();
  static const int kMultiCategoriesFieldNumber = 30;
  const ::index_system::pb::Features& multi_categories(int index) const;
  ::index_system::pb::Features* mutable_multi_categories(int index);
  ::index_system::pb::Features* add_multi_categories();
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::Features >*
      mutable_multi_categories();
  const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Features >&
      multi_categories() const;

  // repeated .index_system.pb.Feature real_title_entities = 32;
  int real_title_entities_size() const;
  void clear_real_title_entities();
  static const int kRealTitleEntitiesFieldNumber = 32;
  const ::index_system::pb::Feature& real_title_entities(int index) const;
  ::index_system::pb::Feature* mutable_real_title_entities(int index);
  ::index_system::pb::Feature* add_real_title_entities();
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >*
      mutable_real_title_entities();
  const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >&
      real_title_entities() const;

  // repeated .index_system.pb.Feature ve_re_te_intersection = 33;
  int ve_re_te_intersection_size() const;
  void clear_ve_re_te_intersection();
  static const int kVeReTeIntersectionFieldNumber = 33;
  const ::index_system::pb::Feature& ve_re_te_intersection(int index) const;
  ::index_system::pb::Feature* mutable_ve_re_te_intersection(int index);
  ::index_system::pb::Feature* add_ve_re_te_intersection();
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >*
      mutable_ve_re_te_intersection();
  const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >&
      ve_re_te_intersection() const;

  // repeated .index_system.pb.Features multi_topics = 34;
  int multi_topics_size() const;
  void clear_multi_topics();
  static const int kMultiTopicsFieldNumber = 34;
  const ::index_system::pb::Features& multi_topics(int index) const;
  ::index_system::pb::Features* mutable_multi_topics(int index);
  ::index_system::pb::Features* add_multi_topics();
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::Features >*
      mutable_multi_topics();
  const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Features >&
      multi_topics() const;

  // required string id = 6;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 6;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required string ncid = 9;
  bool has_ncid() const;
  void clear_ncid();
  static const int kNcidFieldNumber = 9;
  const ::std::string& ncid() const;
  void set_ncid(const ::std::string& value);
  #if LANG_CXX11
  void set_ncid(::std::string&& value);
  #endif
  void set_ncid(const char* value);
  void set_ncid(const char* value, size_t size);
  ::std::string* mutable_ncid();
  ::std::string* release_ncid();
  void set_allocated_ncid(::std::string* ncid);

  // optional .index_system.pb.Feature attributes = 3;
  bool has_attributes() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 3;
  const ::index_system::pb::Feature& attributes() const;
  ::index_system::pb::Feature* mutable_attributes();
  ::index_system::pb::Feature* release_attributes();
  void set_allocated_attributes(::index_system::pb::Feature* attributes);

  // required double feedback_gmp = 7;
  bool has_feedback_gmp() const;
  void clear_feedback_gmp();
  static const int kFeedbackGmpFieldNumber = 7;
  double feedback_gmp() const;
  void set_feedback_gmp(double value);

  // required int64 publish_time = 8;
  bool has_publish_time() const;
  void clear_publish_time();
  static const int kPublishTimeFieldNumber = 8;
  ::google::protobuf::int64 publish_time() const;
  void set_publish_time(::google::protobuf::int64 value);

  // optional int64 update_time = 10 [default = 0];
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 10;
  ::google::protobuf::int64 update_time() const;
  void set_update_time(::google::protobuf::int64 value);

  // optional int32 update_type = 12 [default = 0];
  bool has_update_type() const;
  void clear_update_type();
  static const int kUpdateTypeFieldNumber = 12;
  ::google::protobuf::int32 update_type() const;
  void set_update_type(::google::protobuf::int32 value);

  // required bool isdel = 5 [default = false];
  bool has_isdel() const;
  void clear_isdel();
  static const int kIsdelFieldNumber = 5;
  bool isdel() const;
  void set_isdel(bool value);

  // optional bool build_inc = 19;
  bool has_build_inc() const;
  void clear_build_inc();
  static const int kBuildIncFieldNumber = 19;
  bool build_inc() const;
  void set_build_inc(bool value);

  // optional int32 expire_age_hour = 13 [default = 0];
  bool has_expire_age_hour() const;
  void clear_expire_age_hour();
  static const int kExpireAgeHourFieldNumber = 13;
  ::google::protobuf::int32 expire_age_hour() const;
  void set_expire_age_hour(::google::protobuf::int32 value);

  // optional int32 build_count = 14 [default = 0];
  bool has_build_count() const;
  void clear_build_count();
  static const int kBuildCountFieldNumber = 14;
  ::google::protobuf::int32 build_count() const;
  void set_build_count(::google::protobuf::int32 value);

  // optional int64 expire_time = 16 [default = 0];
  bool has_expire_time() const;
  void clear_expire_time();
  static const int kExpireTimeFieldNumber = 16;
  ::google::protobuf::int64 expire_time() const;
  void set_expire_time(::google::protobuf::int64 value);

  // optional int64 feed_version = 17;
  bool has_feed_version() const;
  void clear_feed_version();
  static const int kFeedVersionFieldNumber = 17;
  ::google::protobuf::int64 feed_version() const;
  void set_feed_version(::google::protobuf::int64 value);

  // optional int64 gmp_update = 20;
  bool has_gmp_update() const;
  void clear_gmp_update();
  static const int kGmpUpdateFieldNumber = 20;
  ::google::protobuf::int64 gmp_update() const;
  void set_gmp_update(::google::protobuf::int64 value);

  // optional double quality = 24;
  bool has_quality() const;
  void clear_quality();
  static const int kQualityFieldNumber = 24;
  double quality() const;
  void set_quality(double value);

  // optional double newsy_score = 25;
  bool has_newsy_score() const;
  void clear_newsy_score();
  static const int kNewsyScoreFieldNumber = 25;
  double newsy_score() const;
  void set_newsy_score(double value);

  // optional uint64 publisher_hash = 27;
  bool has_publisher_hash() const;
  void clear_publisher_hash();
  static const int kPublisherHashFieldNumber = 27;
  ::google::protobuf::uint64 publisher_hash() const;
  void set_publisher_hash(::google::protobuf::uint64 value);

  // optional uint64 groupid_hash = 28;
  bool has_groupid_hash() const;
  void clear_groupid_hash();
  static const int kGroupidHashFieldNumber = 28;
  ::google::protobuf::uint64 groupid_hash() const;
  void set_groupid_hash(::google::protobuf::uint64 value);

  // optional uint64 media_level = 31;
  bool has_media_level() const;
  void clear_media_level();
  static const int kMediaLevelFieldNumber = 31;
  ::google::protobuf::uint64 media_level() const;
  void set_media_level(::google::protobuf::uint64 value);

  // optional uint32 cp_expire_type = 29;
  bool has_cp_expire_type() const;
  void clear_cp_expire_type();
  static const int kCpExpireTypeFieldNumber = 29;
  ::google::protobuf::uint32 cp_expire_type() const;
  void set_cp_expire_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:index_system.pb.Document)
 private:
  void set_has_attributes();
  void clear_has_attributes();
  void set_has_isdel();
  void clear_has_isdel();
  void set_has_id();
  void clear_has_id();
  void set_has_feedback_gmp();
  void clear_has_feedback_gmp();
  void set_has_publish_time();
  void clear_has_publish_time();
  void set_has_ncid();
  void clear_has_ncid();
  void set_has_update_time();
  void clear_has_update_time();
  void set_has_update_type();
  void clear_has_update_type();
  void set_has_expire_age_hour();
  void clear_has_expire_age_hour();
  void set_has_build_count();
  void clear_has_build_count();
  void set_has_expire_time();
  void clear_has_expire_time();
  void set_has_feed_version();
  void clear_has_feed_version();
  void set_has_build_inc();
  void clear_has_build_inc();
  void set_has_gmp_update();
  void clear_has_gmp_update();
  void set_has_quality();
  void clear_has_quality();
  void set_has_newsy_score();
  void clear_has_newsy_score();
  void set_has_publisher_hash();
  void clear_has_publisher_hash();
  void set_has_groupid_hash();
  void clear_has_groupid_hash();
  void set_has_cp_expire_type();
  void clear_has_cp_expire_type();
  void set_has_media_level();
  void clear_has_media_level();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature > keywords_;
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature > categories_;
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::Field > fields_;
  ::google::protobuf::RepeatedPtrField< ::std::string> product_id_;
  ::google::protobuf::RepeatedField< double > multi_gmp_;
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature > topics_;
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature > ventities_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > lr_fea_hashes_;
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature > title_entities_;
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::Field > response_fields_;
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::Features > multi_categories_;
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature > real_title_entities_;
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature > ve_re_te_intersection_;
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::Features > multi_topics_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr ncid_;
  ::index_system::pb::Feature* attributes_;
  double feedback_gmp_;
  ::google::protobuf::int64 publish_time_;
  ::google::protobuf::int64 update_time_;
  ::google::protobuf::int32 update_type_;
  bool isdel_;
  bool build_inc_;
  ::google::protobuf::int32 expire_age_hour_;
  ::google::protobuf::int32 build_count_;
  ::google::protobuf::int64 expire_time_;
  ::google::protobuf::int64 feed_version_;
  ::google::protobuf::int64 gmp_update_;
  double quality_;
  double newsy_score_;
  ::google::protobuf::uint64 publisher_hash_;
  ::google::protobuf::uint64 groupid_hash_;
  ::google::protobuf::uint64 media_level_;
  ::google::protobuf::uint32 cp_expire_type_;
  friend struct  protobuf_document_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Documents : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:index_system.pb.Documents) */ {
 public:
  Documents();
  virtual ~Documents();

  Documents(const Documents& from);

  inline Documents& operator=(const Documents& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Documents& default_instance();

  static inline const Documents* internal_default_instance() {
    return reinterpret_cast<const Documents*>(
               &_Documents_default_instance_);
  }

  void Swap(Documents* other);

  // implements Message ----------------------------------------------

  inline Documents* New() const PROTOBUF_FINAL { return New(NULL); }

  Documents* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Documents& from);
  void MergeFrom(const Documents& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Documents* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .index_system.pb.Document documents = 1;
  int documents_size() const;
  void clear_documents();
  static const int kDocumentsFieldNumber = 1;
  const ::index_system::pb::Document& documents(int index) const;
  ::index_system::pb::Document* mutable_documents(int index);
  ::index_system::pb::Document* add_documents();
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::Document >*
      mutable_documents();
  const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Document >&
      documents() const;

  // @@protoc_insertion_point(class_scope:index_system.pb.Documents)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::index_system::pb::Document > documents_;
  friend struct  protobuf_document_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// StringFeature

// optional string name = 1;
inline bool StringFeature::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StringFeature::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StringFeature::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StringFeature::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& StringFeature::name() const {
  // @@protoc_insertion_point(field_get:index_system.pb.StringFeature.name)
  return name_.GetNoArena();
}
inline void StringFeature::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:index_system.pb.StringFeature.name)
}
#if LANG_CXX11
inline void StringFeature::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:index_system.pb.StringFeature.name)
}
#endif
inline void StringFeature::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:index_system.pb.StringFeature.name)
}
inline void StringFeature::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:index_system.pb.StringFeature.name)
}
inline ::std::string* StringFeature::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:index_system.pb.StringFeature.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StringFeature::release_name() {
  // @@protoc_insertion_point(field_release:index_system.pb.StringFeature.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StringFeature::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:index_system.pb.StringFeature.name)
}

// optional double value = 2;
inline bool StringFeature::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StringFeature::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StringFeature::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StringFeature::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double StringFeature::value() const {
  // @@protoc_insertion_point(field_get:index_system.pb.StringFeature.value)
  return value_;
}
inline void StringFeature::set_value(double value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.StringFeature.value)
}

// -------------------------------------------------------------------

// StringFeatures

// repeated .index_system.pb.StringFeature features = 1;
inline int StringFeatures::features_size() const {
  return features_.size();
}
inline void StringFeatures::clear_features() {
  features_.Clear();
}
inline const ::index_system::pb::StringFeature& StringFeatures::features(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.StringFeatures.features)
  return features_.Get(index);
}
inline ::index_system::pb::StringFeature* StringFeatures::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.StringFeatures.features)
  return features_.Mutable(index);
}
inline ::index_system::pb::StringFeature* StringFeatures::add_features() {
  // @@protoc_insertion_point(field_add:index_system.pb.StringFeatures.features)
  return features_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >*
StringFeatures::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.StringFeatures.features)
  return &features_;
}
inline const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >&
StringFeatures::features() const {
  // @@protoc_insertion_point(field_list:index_system.pb.StringFeatures.features)
  return features_;
}

// -------------------------------------------------------------------

// Feature

// optional uint64 name = 1;
inline bool Feature::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Feature::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Feature::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Feature::clear_name() {
  name_ = GOOGLE_ULONGLONG(0);
  clear_has_name();
}
inline ::google::protobuf::uint64 Feature::name() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Feature.name)
  return name_;
}
inline void Feature::set_name(::google::protobuf::uint64 value) {
  set_has_name();
  name_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Feature.name)
}

// optional double value = 2;
inline bool Feature::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Feature::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Feature::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Feature::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double Feature::value() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Feature.value)
  return value_;
}
inline void Feature::set_value(double value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Feature.value)
}

// -------------------------------------------------------------------

// Features

// repeated .index_system.pb.Feature features = 1;
inline int Features::features_size() const {
  return features_.size();
}
inline void Features::clear_features() {
  features_.Clear();
}
inline const ::index_system::pb::Feature& Features::features(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Features.features)
  return features_.Get(index);
}
inline ::index_system::pb::Feature* Features::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.Features.features)
  return features_.Mutable(index);
}
inline ::index_system::pb::Feature* Features::add_features() {
  // @@protoc_insertion_point(field_add:index_system.pb.Features.features)
  return features_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >*
Features::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Features.features)
  return &features_;
}
inline const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >&
Features::features() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Features.features)
  return features_;
}

// -------------------------------------------------------------------

// Field

// optional string name = 1;
inline bool Field::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Field::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Field::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Field::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Field::name() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Field.name)
  return name_.GetNoArena();
}
inline void Field::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:index_system.pb.Field.name)
}
#if LANG_CXX11
inline void Field::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:index_system.pb.Field.name)
}
#endif
inline void Field::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:index_system.pb.Field.name)
}
inline void Field::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:index_system.pb.Field.name)
}
inline ::std::string* Field::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:index_system.pb.Field.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Field::release_name() {
  // @@protoc_insertion_point(field_release:index_system.pb.Field.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Field::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:index_system.pb.Field.name)
}

// optional string value = 2;
inline bool Field::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Field::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Field::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Field::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& Field::value() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Field.value)
  return value_.GetNoArena();
}
inline void Field::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:index_system.pb.Field.value)
}
#if LANG_CXX11
inline void Field::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:index_system.pb.Field.value)
}
#endif
inline void Field::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:index_system.pb.Field.value)
}
inline void Field::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:index_system.pb.Field.value)
}
inline ::std::string* Field::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:index_system.pb.Field.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Field::release_value() {
  // @@protoc_insertion_point(field_release:index_system.pb.Field.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Field::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:index_system.pb.Field.value)
}

// -------------------------------------------------------------------

// FeedDoc

// required string doc_id = 1;
inline bool FeedDoc::has_doc_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeedDoc::set_has_doc_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeedDoc::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeedDoc::clear_doc_id() {
  doc_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_doc_id();
}
inline const ::std::string& FeedDoc::doc_id() const {
  // @@protoc_insertion_point(field_get:index_system.pb.FeedDoc.doc_id)
  return doc_id_.GetNoArena();
}
inline void FeedDoc::set_doc_id(const ::std::string& value) {
  set_has_doc_id();
  doc_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:index_system.pb.FeedDoc.doc_id)
}
#if LANG_CXX11
inline void FeedDoc::set_doc_id(::std::string&& value) {
  set_has_doc_id();
  doc_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:index_system.pb.FeedDoc.doc_id)
}
#endif
inline void FeedDoc::set_doc_id(const char* value) {
  set_has_doc_id();
  doc_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:index_system.pb.FeedDoc.doc_id)
}
inline void FeedDoc::set_doc_id(const char* value, size_t size) {
  set_has_doc_id();
  doc_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:index_system.pb.FeedDoc.doc_id)
}
inline ::std::string* FeedDoc::mutable_doc_id() {
  set_has_doc_id();
  // @@protoc_insertion_point(field_mutable:index_system.pb.FeedDoc.doc_id)
  return doc_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FeedDoc::release_doc_id() {
  // @@protoc_insertion_point(field_release:index_system.pb.FeedDoc.doc_id)
  clear_has_doc_id();
  return doc_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeedDoc::set_allocated_doc_id(::std::string* doc_id) {
  if (doc_id != NULL) {
    set_has_doc_id();
  } else {
    clear_has_doc_id();
  }
  doc_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_id);
  // @@protoc_insertion_point(field_set_allocated:index_system.pb.FeedDoc.doc_id)
}

// required int64 feed_time = 2;
inline bool FeedDoc::has_feed_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeedDoc::set_has_feed_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeedDoc::clear_has_feed_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeedDoc::clear_feed_time() {
  feed_time_ = GOOGLE_LONGLONG(0);
  clear_has_feed_time();
}
inline ::google::protobuf::int64 FeedDoc::feed_time() const {
  // @@protoc_insertion_point(field_get:index_system.pb.FeedDoc.feed_time)
  return feed_time_;
}
inline void FeedDoc::set_feed_time(::google::protobuf::int64 value) {
  set_has_feed_time();
  feed_time_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.FeedDoc.feed_time)
}

// required bool isdel = 3 [default = false];
inline bool FeedDoc::has_isdel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FeedDoc::set_has_isdel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FeedDoc::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FeedDoc::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool FeedDoc::isdel() const {
  // @@protoc_insertion_point(field_get:index_system.pb.FeedDoc.isdel)
  return isdel_;
}
inline void FeedDoc::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.FeedDoc.isdel)
}

// repeated .index_system.pb.StringFeature categories = 4;
inline int FeedDoc::categories_size() const {
  return categories_.size();
}
inline void FeedDoc::clear_categories() {
  categories_.Clear();
}
inline const ::index_system::pb::StringFeature& FeedDoc::categories(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.FeedDoc.categories)
  return categories_.Get(index);
}
inline ::index_system::pb::StringFeature* FeedDoc::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.FeedDoc.categories)
  return categories_.Mutable(index);
}
inline ::index_system::pb::StringFeature* FeedDoc::add_categories() {
  // @@protoc_insertion_point(field_add:index_system.pb.FeedDoc.categories)
  return categories_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >*
FeedDoc::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.FeedDoc.categories)
  return &categories_;
}
inline const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >&
FeedDoc::categories() const {
  // @@protoc_insertion_point(field_list:index_system.pb.FeedDoc.categories)
  return categories_;
}

// repeated .index_system.pb.StringFeature keywords = 5;
inline int FeedDoc::keywords_size() const {
  return keywords_.size();
}
inline void FeedDoc::clear_keywords() {
  keywords_.Clear();
}
inline const ::index_system::pb::StringFeature& FeedDoc::keywords(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.FeedDoc.keywords)
  return keywords_.Get(index);
}
inline ::index_system::pb::StringFeature* FeedDoc::mutable_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.FeedDoc.keywords)
  return keywords_.Mutable(index);
}
inline ::index_system::pb::StringFeature* FeedDoc::add_keywords() {
  // @@protoc_insertion_point(field_add:index_system.pb.FeedDoc.keywords)
  return keywords_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >*
FeedDoc::mutable_keywords() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.FeedDoc.keywords)
  return &keywords_;
}
inline const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >&
FeedDoc::keywords() const {
  // @@protoc_insertion_point(field_list:index_system.pb.FeedDoc.keywords)
  return keywords_;
}

// repeated .index_system.pb.StringFeature topics = 6;
inline int FeedDoc::topics_size() const {
  return topics_.size();
}
inline void FeedDoc::clear_topics() {
  topics_.Clear();
}
inline const ::index_system::pb::StringFeature& FeedDoc::topics(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.FeedDoc.topics)
  return topics_.Get(index);
}
inline ::index_system::pb::StringFeature* FeedDoc::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.FeedDoc.topics)
  return topics_.Mutable(index);
}
inline ::index_system::pb::StringFeature* FeedDoc::add_topics() {
  // @@protoc_insertion_point(field_add:index_system.pb.FeedDoc.topics)
  return topics_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >*
FeedDoc::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.FeedDoc.topics)
  return &topics_;
}
inline const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >&
FeedDoc::topics() const {
  // @@protoc_insertion_point(field_list:index_system.pb.FeedDoc.topics)
  return topics_;
}

// repeated .index_system.pb.StringFeature ventities = 7;
inline int FeedDoc::ventities_size() const {
  return ventities_.size();
}
inline void FeedDoc::clear_ventities() {
  ventities_.Clear();
}
inline const ::index_system::pb::StringFeature& FeedDoc::ventities(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.FeedDoc.ventities)
  return ventities_.Get(index);
}
inline ::index_system::pb::StringFeature* FeedDoc::mutable_ventities(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.FeedDoc.ventities)
  return ventities_.Mutable(index);
}
inline ::index_system::pb::StringFeature* FeedDoc::add_ventities() {
  // @@protoc_insertion_point(field_add:index_system.pb.FeedDoc.ventities)
  return ventities_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >*
FeedDoc::mutable_ventities() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.FeedDoc.ventities)
  return &ventities_;
}
inline const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >&
FeedDoc::ventities() const {
  // @@protoc_insertion_point(field_list:index_system.pb.FeedDoc.ventities)
  return ventities_;
}

// repeated .index_system.pb.Field fields = 8;
inline int FeedDoc::fields_size() const {
  return fields_.size();
}
inline void FeedDoc::clear_fields() {
  fields_.Clear();
}
inline const ::index_system::pb::Field& FeedDoc::fields(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.FeedDoc.fields)
  return fields_.Get(index);
}
inline ::index_system::pb::Field* FeedDoc::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.FeedDoc.fields)
  return fields_.Mutable(index);
}
inline ::index_system::pb::Field* FeedDoc::add_fields() {
  // @@protoc_insertion_point(field_add:index_system.pb.FeedDoc.fields)
  return fields_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::index_system::pb::Field >*
FeedDoc::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.FeedDoc.fields)
  return &fields_;
}
inline const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Field >&
FeedDoc::fields() const {
  // @@protoc_insertion_point(field_list:index_system.pb.FeedDoc.fields)
  return fields_;
}

// repeated .index_system.pb.StringFeature title_entities = 9;
inline int FeedDoc::title_entities_size() const {
  return title_entities_.size();
}
inline void FeedDoc::clear_title_entities() {
  title_entities_.Clear();
}
inline const ::index_system::pb::StringFeature& FeedDoc::title_entities(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.FeedDoc.title_entities)
  return title_entities_.Get(index);
}
inline ::index_system::pb::StringFeature* FeedDoc::mutable_title_entities(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.FeedDoc.title_entities)
  return title_entities_.Mutable(index);
}
inline ::index_system::pb::StringFeature* FeedDoc::add_title_entities() {
  // @@protoc_insertion_point(field_add:index_system.pb.FeedDoc.title_entities)
  return title_entities_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >*
FeedDoc::mutable_title_entities() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.FeedDoc.title_entities)
  return &title_entities_;
}
inline const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >&
FeedDoc::title_entities() const {
  // @@protoc_insertion_point(field_list:index_system.pb.FeedDoc.title_entities)
  return title_entities_;
}

// repeated .index_system.pb.StringFeatures multi_categories = 10;
inline int FeedDoc::multi_categories_size() const {
  return multi_categories_.size();
}
inline void FeedDoc::clear_multi_categories() {
  multi_categories_.Clear();
}
inline const ::index_system::pb::StringFeatures& FeedDoc::multi_categories(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.FeedDoc.multi_categories)
  return multi_categories_.Get(index);
}
inline ::index_system::pb::StringFeatures* FeedDoc::mutable_multi_categories(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.FeedDoc.multi_categories)
  return multi_categories_.Mutable(index);
}
inline ::index_system::pb::StringFeatures* FeedDoc::add_multi_categories() {
  // @@protoc_insertion_point(field_add:index_system.pb.FeedDoc.multi_categories)
  return multi_categories_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeatures >*
FeedDoc::mutable_multi_categories() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.FeedDoc.multi_categories)
  return &multi_categories_;
}
inline const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeatures >&
FeedDoc::multi_categories() const {
  // @@protoc_insertion_point(field_list:index_system.pb.FeedDoc.multi_categories)
  return multi_categories_;
}

// repeated .index_system.pb.StringFeature real_title_entities = 11;
inline int FeedDoc::real_title_entities_size() const {
  return real_title_entities_.size();
}
inline void FeedDoc::clear_real_title_entities() {
  real_title_entities_.Clear();
}
inline const ::index_system::pb::StringFeature& FeedDoc::real_title_entities(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.FeedDoc.real_title_entities)
  return real_title_entities_.Get(index);
}
inline ::index_system::pb::StringFeature* FeedDoc::mutable_real_title_entities(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.FeedDoc.real_title_entities)
  return real_title_entities_.Mutable(index);
}
inline ::index_system::pb::StringFeature* FeedDoc::add_real_title_entities() {
  // @@protoc_insertion_point(field_add:index_system.pb.FeedDoc.real_title_entities)
  return real_title_entities_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >*
FeedDoc::mutable_real_title_entities() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.FeedDoc.real_title_entities)
  return &real_title_entities_;
}
inline const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >&
FeedDoc::real_title_entities() const {
  // @@protoc_insertion_point(field_list:index_system.pb.FeedDoc.real_title_entities)
  return real_title_entities_;
}

// repeated .index_system.pb.StringFeature ve_re_te_intersection = 12;
inline int FeedDoc::ve_re_te_intersection_size() const {
  return ve_re_te_intersection_.size();
}
inline void FeedDoc::clear_ve_re_te_intersection() {
  ve_re_te_intersection_.Clear();
}
inline const ::index_system::pb::StringFeature& FeedDoc::ve_re_te_intersection(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.FeedDoc.ve_re_te_intersection)
  return ve_re_te_intersection_.Get(index);
}
inline ::index_system::pb::StringFeature* FeedDoc::mutable_ve_re_te_intersection(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.FeedDoc.ve_re_te_intersection)
  return ve_re_te_intersection_.Mutable(index);
}
inline ::index_system::pb::StringFeature* FeedDoc::add_ve_re_te_intersection() {
  // @@protoc_insertion_point(field_add:index_system.pb.FeedDoc.ve_re_te_intersection)
  return ve_re_te_intersection_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >*
FeedDoc::mutable_ve_re_te_intersection() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.FeedDoc.ve_re_te_intersection)
  return &ve_re_te_intersection_;
}
inline const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >&
FeedDoc::ve_re_te_intersection() const {
  // @@protoc_insertion_point(field_list:index_system.pb.FeedDoc.ve_re_te_intersection)
  return ve_re_te_intersection_;
}

// repeated .index_system.pb.StringFeature video_tags = 13;
inline int FeedDoc::video_tags_size() const {
  return video_tags_.size();
}
inline void FeedDoc::clear_video_tags() {
  video_tags_.Clear();
}
inline const ::index_system::pb::StringFeature& FeedDoc::video_tags(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.FeedDoc.video_tags)
  return video_tags_.Get(index);
}
inline ::index_system::pb::StringFeature* FeedDoc::mutable_video_tags(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.FeedDoc.video_tags)
  return video_tags_.Mutable(index);
}
inline ::index_system::pb::StringFeature* FeedDoc::add_video_tags() {
  // @@protoc_insertion_point(field_add:index_system.pb.FeedDoc.video_tags)
  return video_tags_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >*
FeedDoc::mutable_video_tags() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.FeedDoc.video_tags)
  return &video_tags_;
}
inline const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeature >&
FeedDoc::video_tags() const {
  // @@protoc_insertion_point(field_list:index_system.pb.FeedDoc.video_tags)
  return video_tags_;
}

// repeated .index_system.pb.StringFeatures multi_topics = 14;
inline int FeedDoc::multi_topics_size() const {
  return multi_topics_.size();
}
inline void FeedDoc::clear_multi_topics() {
  multi_topics_.Clear();
}
inline const ::index_system::pb::StringFeatures& FeedDoc::multi_topics(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.FeedDoc.multi_topics)
  return multi_topics_.Get(index);
}
inline ::index_system::pb::StringFeatures* FeedDoc::mutable_multi_topics(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.FeedDoc.multi_topics)
  return multi_topics_.Mutable(index);
}
inline ::index_system::pb::StringFeatures* FeedDoc::add_multi_topics() {
  // @@protoc_insertion_point(field_add:index_system.pb.FeedDoc.multi_topics)
  return multi_topics_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeatures >*
FeedDoc::mutable_multi_topics() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.FeedDoc.multi_topics)
  return &multi_topics_;
}
inline const ::google::protobuf::RepeatedPtrField< ::index_system::pb::StringFeatures >&
FeedDoc::multi_topics() const {
  // @@protoc_insertion_point(field_list:index_system.pb.FeedDoc.multi_topics)
  return multi_topics_;
}

// -------------------------------------------------------------------

// Document

// repeated .index_system.pb.Feature keywords = 1;
inline int Document::keywords_size() const {
  return keywords_.size();
}
inline void Document::clear_keywords() {
  keywords_.Clear();
}
inline const ::index_system::pb::Feature& Document::keywords(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.keywords)
  return keywords_.Get(index);
}
inline ::index_system::pb::Feature* Document::mutable_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.keywords)
  return keywords_.Mutable(index);
}
inline ::index_system::pb::Feature* Document::add_keywords() {
  // @@protoc_insertion_point(field_add:index_system.pb.Document.keywords)
  return keywords_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >*
Document::mutable_keywords() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Document.keywords)
  return &keywords_;
}
inline const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >&
Document::keywords() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Document.keywords)
  return keywords_;
}

// repeated .index_system.pb.Feature categories = 2;
inline int Document::categories_size() const {
  return categories_.size();
}
inline void Document::clear_categories() {
  categories_.Clear();
}
inline const ::index_system::pb::Feature& Document::categories(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.categories)
  return categories_.Get(index);
}
inline ::index_system::pb::Feature* Document::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.categories)
  return categories_.Mutable(index);
}
inline ::index_system::pb::Feature* Document::add_categories() {
  // @@protoc_insertion_point(field_add:index_system.pb.Document.categories)
  return categories_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >*
Document::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Document.categories)
  return &categories_;
}
inline const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >&
Document::categories() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Document.categories)
  return categories_;
}

// optional .index_system.pb.Feature attributes = 3;
inline bool Document::has_attributes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Document::set_has_attributes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Document::clear_has_attributes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Document::clear_attributes() {
  if (attributes_ != NULL) attributes_->::index_system::pb::Feature::Clear();
  clear_has_attributes();
}
inline const ::index_system::pb::Feature& Document::attributes() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.attributes)
  return attributes_ != NULL ? *attributes_
                         : *::index_system::pb::Feature::internal_default_instance();
}
inline ::index_system::pb::Feature* Document::mutable_attributes() {
  set_has_attributes();
  if (attributes_ == NULL) {
    attributes_ = new ::index_system::pb::Feature;
  }
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.attributes)
  return attributes_;
}
inline ::index_system::pb::Feature* Document::release_attributes() {
  // @@protoc_insertion_point(field_release:index_system.pb.Document.attributes)
  clear_has_attributes();
  ::index_system::pb::Feature* temp = attributes_;
  attributes_ = NULL;
  return temp;
}
inline void Document::set_allocated_attributes(::index_system::pb::Feature* attributes) {
  delete attributes_;
  attributes_ = attributes;
  if (attributes) {
    set_has_attributes();
  } else {
    clear_has_attributes();
  }
  // @@protoc_insertion_point(field_set_allocated:index_system.pb.Document.attributes)
}

// repeated .index_system.pb.Field fields = 4;
inline int Document::fields_size() const {
  return fields_.size();
}
inline void Document::clear_fields() {
  fields_.Clear();
}
inline const ::index_system::pb::Field& Document::fields(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.fields)
  return fields_.Get(index);
}
inline ::index_system::pb::Field* Document::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.fields)
  return fields_.Mutable(index);
}
inline ::index_system::pb::Field* Document::add_fields() {
  // @@protoc_insertion_point(field_add:index_system.pb.Document.fields)
  return fields_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::index_system::pb::Field >*
Document::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Document.fields)
  return &fields_;
}
inline const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Field >&
Document::fields() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Document.fields)
  return fields_;
}

// required bool isdel = 5 [default = false];
inline bool Document::has_isdel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Document::set_has_isdel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Document::clear_has_isdel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Document::clear_isdel() {
  isdel_ = false;
  clear_has_isdel();
}
inline bool Document::isdel() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.isdel)
  return isdel_;
}
inline void Document::set_isdel(bool value) {
  set_has_isdel();
  isdel_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.isdel)
}

// required string id = 6;
inline bool Document::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Document::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Document::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Document::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Document::id() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.id)
  return id_.GetNoArena();
}
inline void Document::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:index_system.pb.Document.id)
}
#if LANG_CXX11
inline void Document::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:index_system.pb.Document.id)
}
#endif
inline void Document::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:index_system.pb.Document.id)
}
inline void Document::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:index_system.pb.Document.id)
}
inline ::std::string* Document::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Document::release_id() {
  // @@protoc_insertion_point(field_release:index_system.pb.Document.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Document::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:index_system.pb.Document.id)
}

// required double feedback_gmp = 7;
inline bool Document::has_feedback_gmp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Document::set_has_feedback_gmp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Document::clear_has_feedback_gmp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Document::clear_feedback_gmp() {
  feedback_gmp_ = 0;
  clear_has_feedback_gmp();
}
inline double Document::feedback_gmp() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.feedback_gmp)
  return feedback_gmp_;
}
inline void Document::set_feedback_gmp(double value) {
  set_has_feedback_gmp();
  feedback_gmp_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.feedback_gmp)
}

// required int64 publish_time = 8;
inline bool Document::has_publish_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Document::set_has_publish_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Document::clear_has_publish_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Document::clear_publish_time() {
  publish_time_ = GOOGLE_LONGLONG(0);
  clear_has_publish_time();
}
inline ::google::protobuf::int64 Document::publish_time() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.publish_time)
  return publish_time_;
}
inline void Document::set_publish_time(::google::protobuf::int64 value) {
  set_has_publish_time();
  publish_time_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.publish_time)
}

// required string ncid = 9;
inline bool Document::has_ncid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Document::set_has_ncid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Document::clear_has_ncid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Document::clear_ncid() {
  ncid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ncid();
}
inline const ::std::string& Document::ncid() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.ncid)
  return ncid_.GetNoArena();
}
inline void Document::set_ncid(const ::std::string& value) {
  set_has_ncid();
  ncid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:index_system.pb.Document.ncid)
}
#if LANG_CXX11
inline void Document::set_ncid(::std::string&& value) {
  set_has_ncid();
  ncid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:index_system.pb.Document.ncid)
}
#endif
inline void Document::set_ncid(const char* value) {
  set_has_ncid();
  ncid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:index_system.pb.Document.ncid)
}
inline void Document::set_ncid(const char* value, size_t size) {
  set_has_ncid();
  ncid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:index_system.pb.Document.ncid)
}
inline ::std::string* Document::mutable_ncid() {
  set_has_ncid();
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.ncid)
  return ncid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Document::release_ncid() {
  // @@protoc_insertion_point(field_release:index_system.pb.Document.ncid)
  clear_has_ncid();
  return ncid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Document::set_allocated_ncid(::std::string* ncid) {
  if (ncid != NULL) {
    set_has_ncid();
  } else {
    clear_has_ncid();
  }
  ncid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ncid);
  // @@protoc_insertion_point(field_set_allocated:index_system.pb.Document.ncid)
}

// optional int64 update_time = 10 [default = 0];
inline bool Document::has_update_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Document::set_has_update_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Document::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Document::clear_update_time() {
  update_time_ = GOOGLE_LONGLONG(0);
  clear_has_update_time();
}
inline ::google::protobuf::int64 Document::update_time() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.update_time)
  return update_time_;
}
inline void Document::set_update_time(::google::protobuf::int64 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.update_time)
}

// repeated string product_id = 11;
inline int Document::product_id_size() const {
  return product_id_.size();
}
inline void Document::clear_product_id() {
  product_id_.Clear();
}
inline const ::std::string& Document::product_id(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.product_id)
  return product_id_.Get(index);
}
inline ::std::string* Document::mutable_product_id(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.product_id)
  return product_id_.Mutable(index);
}
inline void Document::set_product_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:index_system.pb.Document.product_id)
  product_id_.Mutable(index)->assign(value);
}
inline void Document::set_product_id(int index, const char* value) {
  product_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:index_system.pb.Document.product_id)
}
inline void Document::set_product_id(int index, const char* value, size_t size) {
  product_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:index_system.pb.Document.product_id)
}
inline ::std::string* Document::add_product_id() {
  // @@protoc_insertion_point(field_add_mutable:index_system.pb.Document.product_id)
  return product_id_.Add();
}
inline void Document::add_product_id(const ::std::string& value) {
  product_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:index_system.pb.Document.product_id)
}
inline void Document::add_product_id(const char* value) {
  product_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:index_system.pb.Document.product_id)
}
inline void Document::add_product_id(const char* value, size_t size) {
  product_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:index_system.pb.Document.product_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Document::product_id() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Document.product_id)
  return product_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Document::mutable_product_id() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Document.product_id)
  return &product_id_;
}

// optional int32 update_type = 12 [default = 0];
inline bool Document::has_update_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Document::set_has_update_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Document::clear_has_update_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Document::clear_update_type() {
  update_type_ = 0;
  clear_has_update_type();
}
inline ::google::protobuf::int32 Document::update_type() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.update_type)
  return update_type_;
}
inline void Document::set_update_type(::google::protobuf::int32 value) {
  set_has_update_type();
  update_type_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.update_type)
}

// optional int32 expire_age_hour = 13 [default = 0];
inline bool Document::has_expire_age_hour() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Document::set_has_expire_age_hour() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Document::clear_has_expire_age_hour() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Document::clear_expire_age_hour() {
  expire_age_hour_ = 0;
  clear_has_expire_age_hour();
}
inline ::google::protobuf::int32 Document::expire_age_hour() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.expire_age_hour)
  return expire_age_hour_;
}
inline void Document::set_expire_age_hour(::google::protobuf::int32 value) {
  set_has_expire_age_hour();
  expire_age_hour_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.expire_age_hour)
}

// optional int32 build_count = 14 [default = 0];
inline bool Document::has_build_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Document::set_has_build_count() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Document::clear_has_build_count() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Document::clear_build_count() {
  build_count_ = 0;
  clear_has_build_count();
}
inline ::google::protobuf::int32 Document::build_count() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.build_count)
  return build_count_;
}
inline void Document::set_build_count(::google::protobuf::int32 value) {
  set_has_build_count();
  build_count_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.build_count)
}

// repeated double multi_gmp = 15;
inline int Document::multi_gmp_size() const {
  return multi_gmp_.size();
}
inline void Document::clear_multi_gmp() {
  multi_gmp_.Clear();
}
inline double Document::multi_gmp(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.multi_gmp)
  return multi_gmp_.Get(index);
}
inline void Document::set_multi_gmp(int index, double value) {
  multi_gmp_.Set(index, value);
  // @@protoc_insertion_point(field_set:index_system.pb.Document.multi_gmp)
}
inline void Document::add_multi_gmp(double value) {
  multi_gmp_.Add(value);
  // @@protoc_insertion_point(field_add:index_system.pb.Document.multi_gmp)
}
inline const ::google::protobuf::RepeatedField< double >&
Document::multi_gmp() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Document.multi_gmp)
  return multi_gmp_;
}
inline ::google::protobuf::RepeatedField< double >*
Document::mutable_multi_gmp() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Document.multi_gmp)
  return &multi_gmp_;
}

// optional int64 expire_time = 16 [default = 0];
inline bool Document::has_expire_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Document::set_has_expire_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Document::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Document::clear_expire_time() {
  expire_time_ = GOOGLE_LONGLONG(0);
  clear_has_expire_time();
}
inline ::google::protobuf::int64 Document::expire_time() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.expire_time)
  return expire_time_;
}
inline void Document::set_expire_time(::google::protobuf::int64 value) {
  set_has_expire_time();
  expire_time_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.expire_time)
}

// optional int64 feed_version = 17;
inline bool Document::has_feed_version() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Document::set_has_feed_version() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Document::clear_has_feed_version() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Document::clear_feed_version() {
  feed_version_ = GOOGLE_LONGLONG(0);
  clear_has_feed_version();
}
inline ::google::protobuf::int64 Document::feed_version() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.feed_version)
  return feed_version_;
}
inline void Document::set_feed_version(::google::protobuf::int64 value) {
  set_has_feed_version();
  feed_version_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.feed_version)
}

// repeated .index_system.pb.Feature topics = 18;
inline int Document::topics_size() const {
  return topics_.size();
}
inline void Document::clear_topics() {
  topics_.Clear();
}
inline const ::index_system::pb::Feature& Document::topics(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.topics)
  return topics_.Get(index);
}
inline ::index_system::pb::Feature* Document::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.topics)
  return topics_.Mutable(index);
}
inline ::index_system::pb::Feature* Document::add_topics() {
  // @@protoc_insertion_point(field_add:index_system.pb.Document.topics)
  return topics_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >*
Document::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Document.topics)
  return &topics_;
}
inline const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >&
Document::topics() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Document.topics)
  return topics_;
}

// optional bool build_inc = 19;
inline bool Document::has_build_inc() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Document::set_has_build_inc() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Document::clear_has_build_inc() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Document::clear_build_inc() {
  build_inc_ = false;
  clear_has_build_inc();
}
inline bool Document::build_inc() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.build_inc)
  return build_inc_;
}
inline void Document::set_build_inc(bool value) {
  set_has_build_inc();
  build_inc_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.build_inc)
}

// optional int64 gmp_update = 20;
inline bool Document::has_gmp_update() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Document::set_has_gmp_update() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Document::clear_has_gmp_update() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Document::clear_gmp_update() {
  gmp_update_ = GOOGLE_LONGLONG(0);
  clear_has_gmp_update();
}
inline ::google::protobuf::int64 Document::gmp_update() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.gmp_update)
  return gmp_update_;
}
inline void Document::set_gmp_update(::google::protobuf::int64 value) {
  set_has_gmp_update();
  gmp_update_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.gmp_update)
}

// repeated .index_system.pb.Feature ventities = 21;
inline int Document::ventities_size() const {
  return ventities_.size();
}
inline void Document::clear_ventities() {
  ventities_.Clear();
}
inline const ::index_system::pb::Feature& Document::ventities(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.ventities)
  return ventities_.Get(index);
}
inline ::index_system::pb::Feature* Document::mutable_ventities(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.ventities)
  return ventities_.Mutable(index);
}
inline ::index_system::pb::Feature* Document::add_ventities() {
  // @@protoc_insertion_point(field_add:index_system.pb.Document.ventities)
  return ventities_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >*
Document::mutable_ventities() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Document.ventities)
  return &ventities_;
}
inline const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >&
Document::ventities() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Document.ventities)
  return ventities_;
}

// repeated uint64 lr_fea_hashes = 22;
inline int Document::lr_fea_hashes_size() const {
  return lr_fea_hashes_.size();
}
inline void Document::clear_lr_fea_hashes() {
  lr_fea_hashes_.Clear();
}
inline ::google::protobuf::uint64 Document::lr_fea_hashes(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.lr_fea_hashes)
  return lr_fea_hashes_.Get(index);
}
inline void Document::set_lr_fea_hashes(int index, ::google::protobuf::uint64 value) {
  lr_fea_hashes_.Set(index, value);
  // @@protoc_insertion_point(field_set:index_system.pb.Document.lr_fea_hashes)
}
inline void Document::add_lr_fea_hashes(::google::protobuf::uint64 value) {
  lr_fea_hashes_.Add(value);
  // @@protoc_insertion_point(field_add:index_system.pb.Document.lr_fea_hashes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Document::lr_fea_hashes() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Document.lr_fea_hashes)
  return lr_fea_hashes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Document::mutable_lr_fea_hashes() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Document.lr_fea_hashes)
  return &lr_fea_hashes_;
}

// repeated .index_system.pb.Feature title_entities = 23;
inline int Document::title_entities_size() const {
  return title_entities_.size();
}
inline void Document::clear_title_entities() {
  title_entities_.Clear();
}
inline const ::index_system::pb::Feature& Document::title_entities(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.title_entities)
  return title_entities_.Get(index);
}
inline ::index_system::pb::Feature* Document::mutable_title_entities(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.title_entities)
  return title_entities_.Mutable(index);
}
inline ::index_system::pb::Feature* Document::add_title_entities() {
  // @@protoc_insertion_point(field_add:index_system.pb.Document.title_entities)
  return title_entities_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >*
Document::mutable_title_entities() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Document.title_entities)
  return &title_entities_;
}
inline const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >&
Document::title_entities() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Document.title_entities)
  return title_entities_;
}

// optional double quality = 24;
inline bool Document::has_quality() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Document::set_has_quality() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Document::clear_has_quality() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Document::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline double Document::quality() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.quality)
  return quality_;
}
inline void Document::set_quality(double value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.quality)
}

// optional double newsy_score = 25;
inline bool Document::has_newsy_score() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Document::set_has_newsy_score() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Document::clear_has_newsy_score() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Document::clear_newsy_score() {
  newsy_score_ = 0;
  clear_has_newsy_score();
}
inline double Document::newsy_score() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.newsy_score)
  return newsy_score_;
}
inline void Document::set_newsy_score(double value) {
  set_has_newsy_score();
  newsy_score_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.newsy_score)
}

// repeated .index_system.pb.Field response_fields = 26;
inline int Document::response_fields_size() const {
  return response_fields_.size();
}
inline void Document::clear_response_fields() {
  response_fields_.Clear();
}
inline const ::index_system::pb::Field& Document::response_fields(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.response_fields)
  return response_fields_.Get(index);
}
inline ::index_system::pb::Field* Document::mutable_response_fields(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.response_fields)
  return response_fields_.Mutable(index);
}
inline ::index_system::pb::Field* Document::add_response_fields() {
  // @@protoc_insertion_point(field_add:index_system.pb.Document.response_fields)
  return response_fields_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::index_system::pb::Field >*
Document::mutable_response_fields() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Document.response_fields)
  return &response_fields_;
}
inline const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Field >&
Document::response_fields() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Document.response_fields)
  return response_fields_;
}

// optional uint64 publisher_hash = 27;
inline bool Document::has_publisher_hash() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Document::set_has_publisher_hash() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Document::clear_has_publisher_hash() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Document::clear_publisher_hash() {
  publisher_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_publisher_hash();
}
inline ::google::protobuf::uint64 Document::publisher_hash() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.publisher_hash)
  return publisher_hash_;
}
inline void Document::set_publisher_hash(::google::protobuf::uint64 value) {
  set_has_publisher_hash();
  publisher_hash_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.publisher_hash)
}

// optional uint64 groupid_hash = 28;
inline bool Document::has_groupid_hash() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Document::set_has_groupid_hash() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Document::clear_has_groupid_hash() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Document::clear_groupid_hash() {
  groupid_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid_hash();
}
inline ::google::protobuf::uint64 Document::groupid_hash() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.groupid_hash)
  return groupid_hash_;
}
inline void Document::set_groupid_hash(::google::protobuf::uint64 value) {
  set_has_groupid_hash();
  groupid_hash_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.groupid_hash)
}

// optional uint32 cp_expire_type = 29;
inline bool Document::has_cp_expire_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Document::set_has_cp_expire_type() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Document::clear_has_cp_expire_type() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Document::clear_cp_expire_type() {
  cp_expire_type_ = 0u;
  clear_has_cp_expire_type();
}
inline ::google::protobuf::uint32 Document::cp_expire_type() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.cp_expire_type)
  return cp_expire_type_;
}
inline void Document::set_cp_expire_type(::google::protobuf::uint32 value) {
  set_has_cp_expire_type();
  cp_expire_type_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.cp_expire_type)
}

// repeated .index_system.pb.Features multi_categories = 30;
inline int Document::multi_categories_size() const {
  return multi_categories_.size();
}
inline void Document::clear_multi_categories() {
  multi_categories_.Clear();
}
inline const ::index_system::pb::Features& Document::multi_categories(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.multi_categories)
  return multi_categories_.Get(index);
}
inline ::index_system::pb::Features* Document::mutable_multi_categories(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.multi_categories)
  return multi_categories_.Mutable(index);
}
inline ::index_system::pb::Features* Document::add_multi_categories() {
  // @@protoc_insertion_point(field_add:index_system.pb.Document.multi_categories)
  return multi_categories_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::index_system::pb::Features >*
Document::mutable_multi_categories() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Document.multi_categories)
  return &multi_categories_;
}
inline const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Features >&
Document::multi_categories() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Document.multi_categories)
  return multi_categories_;
}

// optional uint64 media_level = 31;
inline bool Document::has_media_level() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Document::set_has_media_level() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Document::clear_has_media_level() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Document::clear_media_level() {
  media_level_ = GOOGLE_ULONGLONG(0);
  clear_has_media_level();
}
inline ::google::protobuf::uint64 Document::media_level() const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.media_level)
  return media_level_;
}
inline void Document::set_media_level(::google::protobuf::uint64 value) {
  set_has_media_level();
  media_level_ = value;
  // @@protoc_insertion_point(field_set:index_system.pb.Document.media_level)
}

// repeated .index_system.pb.Feature real_title_entities = 32;
inline int Document::real_title_entities_size() const {
  return real_title_entities_.size();
}
inline void Document::clear_real_title_entities() {
  real_title_entities_.Clear();
}
inline const ::index_system::pb::Feature& Document::real_title_entities(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.real_title_entities)
  return real_title_entities_.Get(index);
}
inline ::index_system::pb::Feature* Document::mutable_real_title_entities(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.real_title_entities)
  return real_title_entities_.Mutable(index);
}
inline ::index_system::pb::Feature* Document::add_real_title_entities() {
  // @@protoc_insertion_point(field_add:index_system.pb.Document.real_title_entities)
  return real_title_entities_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >*
Document::mutable_real_title_entities() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Document.real_title_entities)
  return &real_title_entities_;
}
inline const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >&
Document::real_title_entities() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Document.real_title_entities)
  return real_title_entities_;
}

// repeated .index_system.pb.Feature ve_re_te_intersection = 33;
inline int Document::ve_re_te_intersection_size() const {
  return ve_re_te_intersection_.size();
}
inline void Document::clear_ve_re_te_intersection() {
  ve_re_te_intersection_.Clear();
}
inline const ::index_system::pb::Feature& Document::ve_re_te_intersection(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.ve_re_te_intersection)
  return ve_re_te_intersection_.Get(index);
}
inline ::index_system::pb::Feature* Document::mutable_ve_re_te_intersection(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.ve_re_te_intersection)
  return ve_re_te_intersection_.Mutable(index);
}
inline ::index_system::pb::Feature* Document::add_ve_re_te_intersection() {
  // @@protoc_insertion_point(field_add:index_system.pb.Document.ve_re_te_intersection)
  return ve_re_te_intersection_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >*
Document::mutable_ve_re_te_intersection() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Document.ve_re_te_intersection)
  return &ve_re_te_intersection_;
}
inline const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Feature >&
Document::ve_re_te_intersection() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Document.ve_re_te_intersection)
  return ve_re_te_intersection_;
}

// repeated .index_system.pb.Features multi_topics = 34;
inline int Document::multi_topics_size() const {
  return multi_topics_.size();
}
inline void Document::clear_multi_topics() {
  multi_topics_.Clear();
}
inline const ::index_system::pb::Features& Document::multi_topics(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Document.multi_topics)
  return multi_topics_.Get(index);
}
inline ::index_system::pb::Features* Document::mutable_multi_topics(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.Document.multi_topics)
  return multi_topics_.Mutable(index);
}
inline ::index_system::pb::Features* Document::add_multi_topics() {
  // @@protoc_insertion_point(field_add:index_system.pb.Document.multi_topics)
  return multi_topics_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::index_system::pb::Features >*
Document::mutable_multi_topics() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Document.multi_topics)
  return &multi_topics_;
}
inline const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Features >&
Document::multi_topics() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Document.multi_topics)
  return multi_topics_;
}

// -------------------------------------------------------------------

// Documents

// repeated .index_system.pb.Document documents = 1;
inline int Documents::documents_size() const {
  return documents_.size();
}
inline void Documents::clear_documents() {
  documents_.Clear();
}
inline const ::index_system::pb::Document& Documents::documents(int index) const {
  // @@protoc_insertion_point(field_get:index_system.pb.Documents.documents)
  return documents_.Get(index);
}
inline ::index_system::pb::Document* Documents::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:index_system.pb.Documents.documents)
  return documents_.Mutable(index);
}
inline ::index_system::pb::Document* Documents::add_documents() {
  // @@protoc_insertion_point(field_add:index_system.pb.Documents.documents)
  return documents_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::index_system::pb::Document >*
Documents::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:index_system.pb.Documents.documents)
  return &documents_;
}
inline const ::google::protobuf::RepeatedPtrField< ::index_system::pb::Document >&
Documents::documents() const {
  // @@protoc_insertion_point(field_list:index_system.pb.Documents.documents)
  return documents_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb
}  // namespace index_system

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_document_2eproto__INCLUDED
